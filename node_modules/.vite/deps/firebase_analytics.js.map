{
  "version": 3,
  "sources": ["../../safevalues/dist/mjs/environment/dev.js", "../../safevalues/dist/mjs/internals/secrets.js", "../../safevalues/dist/mjs/internals/attribute_impl.js", "../../safevalues/dist/mjs/internals/string_literal.js", "../../safevalues/dist/mjs/internals/trusted_types.js", "../../safevalues/dist/mjs/internals/html_impl.js", "../../safevalues/dist/mjs/internals/resource_url_impl.js", "../../safevalues/dist/mjs/internals/script_impl.js", "../../safevalues/dist/mjs/builders/html_builders.js", "../../safevalues/dist/mjs/internals/pure.js", "../../safevalues/dist/mjs/builders/url_builders.js", "../../safevalues/dist/mjs/dom/globals/range.js", "../../safevalues/dist/mjs/builders/html_sanitizer/inert_fragment.js", "../../safevalues/dist/mjs/builders/html_sanitizer/no_clobber.js", "../../safevalues/dist/mjs/builders/html_sanitizer/resource_url_policy.js", "../../safevalues/dist/mjs/builders/html_sanitizer/sanitizer_table/sanitizer_table.js", "../../safevalues/dist/mjs/builders/html_sanitizer/sanitizer_table/default_sanitizer_table.js", "../../safevalues/dist/mjs/builders/html_sanitizer/html_sanitizer.js", "../../safevalues/dist/mjs/builders/resource_url_builders.js", "../../safevalues/dist/mjs/internals/style_sheet_impl.js", "../../safevalues/dist/mjs/dom/elements/anchor.js", "../../safevalues/dist/mjs/dom/elements/area.js", "../../safevalues/dist/mjs/dom/elements/base.js", "../../safevalues/dist/mjs/dom/elements/button.js", "../../safevalues/dist/mjs/dom/elements/element.js", "../../safevalues/dist/mjs/dom/elements/embed.js", "../../safevalues/dist/mjs/dom/elements/form.js", "../../safevalues/dist/mjs/dom/elements/iframe.js", "../../safevalues/dist/mjs/dom/elements/input.js", "../../safevalues/dist/mjs/dom/elements/link.js", "../../safevalues/dist/mjs/dom/elements/object.js", "../../safevalues/dist/mjs/dom/elements/script.js", "../../safevalues/dist/mjs/dom/globals/window.js", "../../safevalues/dist/mjs/dom/elements/style.js", "../../safevalues/dist/mjs/dom/elements/svg.js", "../../safevalues/dist/mjs/dom/elements/svg_use.js", "../../safevalues/dist/mjs/dom/globals/document.js", "../../safevalues/dist/mjs/dom/globals/dom_parser.js", "../../safevalues/dist/mjs/dom/globals/global.js", "../../safevalues/dist/mjs/dom/globals/fetch.js", "../../safevalues/dist/mjs/dom/globals/location.js", "../../safevalues/dist/mjs/dom/globals/service_worker_container.js", "../../safevalues/dist/mjs/dom/globals/url.js", "../../safevalues/dist/mjs/dom/globals/worker.js", "../../@firebase/analytics/src/constants.ts", "../../@firebase/analytics/src/logger.ts", "../../@firebase/analytics/src/helpers.ts", "../../@firebase/analytics/src/errors.ts", "../../@firebase/analytics/src/get-config.ts", "../../@firebase/analytics/src/functions.ts", "../../@firebase/analytics/src/initialize-analytics.ts", "../../@firebase/analytics/src/factory.ts", "../../@firebase/analytics/src/api.ts", "../../@firebase/analytics/src/index.ts"],
  "sourcesContent": ["\"use strict\";\r\n/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * Ensure process.env.NODE_ENV is set even when not running under Webpack or\r\n * Node. Terser will strip this out of production binaries.\r\n */\r\n/*#__PURE__*/ (() => {\r\n    if (typeof process === 'undefined') {\r\n        window.process = {\r\n            env: {\r\n                NODE_ENV: 'development',\r\n            },\r\n        };\r\n    }\r\n})();\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport '../environment/dev.js';\r\n/**\r\n * A secret token that must be passed to safe type constructors. It is only\r\n * accessible from within safevalues, ensuring that unrestricted safe type\r\n * creation is only possible within safevalues. In particular, this prevents\r\n * forgery such as `safeHtmlValue.constructor('javascript:evil')`.\r\n */\r\nexport const secretToken = {};\r\n/**\r\n * Asserts that the given token matches the secret safevalues token. An\r\n * exception is thrown if that is not the case.\r\n */\r\nexport function ensureTokenIsValid(token) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        if (token !== secretToken) {\r\n            throw new Error('Bad secret');\r\n        }\r\n    }\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/** @fileoverview Internal implementations of SafeAttributePrefix. */\r\nimport '../environment/dev.js';\r\nimport { ensureTokenIsValid, secretToken } from './secrets.js';\r\n/**\r\n * A prefix with which an attribute is safe to set using plain strings.\r\n */\r\nexport class SafeAttributePrefix {\r\n    constructor(token, value) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            ensureTokenIsValid(token);\r\n        }\r\n        this.privateDoNotAccessOrElseWrappedAttributePrefix = value;\r\n    }\r\n    toString() {\r\n        return this.privateDoNotAccessOrElseWrappedAttributePrefix;\r\n    }\r\n}\r\nconst AttributePrefixImpl = SafeAttributePrefix;\r\n/**\r\n * Builds a new `SafeAttributePrefix` from the given string, without enforcing\r\n * safety guarantees. This shouldn't be exposed to application developers, and\r\n * must only be used as a step towards safe builders or safe constants.\r\n */\r\nexport function createAttributePrefixInternal(value) {\r\n    return new AttributePrefixImpl(secretToken, value);\r\n}\r\n/**\r\n * Checks if the given value is a `SafeAttributePrefix` instance.\r\n */\r\nexport function isAttributePrefix(value) {\r\n    return value instanceof SafeAttributePrefix;\r\n}\r\n/**\r\n * Returns the string value of the passed `SafeAttributePrefix` object while\r\n * ensuring it has the correct type.\r\n */\r\nexport function unwrapAttributePrefix(value) {\r\n    if (isAttributePrefix(value)) {\r\n        return value\r\n            .privateDoNotAccessOrElseWrappedAttributePrefix;\r\n    }\r\n    let message = '';\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        message = `Unexpected type when unwrapping SafeAttributePrefix, got '${value}' of type '${typeof value}'`;\r\n    }\r\n    throw new Error(message);\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * An object of type TemplateStringsArray represents the literal part(s) of a\r\n * template literal. This function checks if a TemplateStringsArray object is\r\n * actually from a template literal.\r\n *\r\n * @param templateObj This contains the literal part of the template literal.\r\n * @param numExprs The number of embedded expressions\r\n */\r\nexport function assertIsTemplateObject(templateObj, numExprs) {\r\n    if (!isTemplateObject(templateObj) || numExprs + 1 !== templateObj.length) {\r\n        throw new TypeError(`\r\n    ############################## ERROR ##############################\r\n\r\n    It looks like you are trying to call a template tag function (fn\\`...\\`)\r\n    using the normal function syntax (fn(...)), which is not supported.\r\n\r\n    The functions in the safevalues library are not designed to be called\r\n    like normal functions, and doing so invalidates the security guarantees\r\n    that safevalues provides.\r\n\r\n    If you are stuck and not sure how to proceed, please reach out to us\r\n    instead through:\r\n     - https://github.com/google/safevalues/issues\r\n\r\n    ############################## ERROR ##############################`);\r\n    }\r\n}\r\n/** Checks if `templateObj` and its raw property are frozen. */\r\nfunction checkFrozen(templateObj) {\r\n    return Object.isFrozen(templateObj) && Object.isFrozen(templateObj.raw);\r\n}\r\n/**\r\n * Checks if a function containing a tagged template expression is transpiled.\r\n */\r\nfunction checkTranspiled(fn) {\r\n    return fn.toString().indexOf('`') === -1;\r\n}\r\n/**\r\n * This value tells us if the code is transpiled, in which case we don't\r\n * check certain things that transpilers typically don't support. The\r\n * transpilation turns it into a function call that takes an array.\r\n */\r\nconst isTranspiled = checkTranspiled((tag) => tag ``) ||\r\n    checkTranspiled((tag) => tag `\\0`) ||\r\n    checkTranspiled((tag) => tag `\\n`) ||\r\n    checkTranspiled((tag) => tag `\\u0000`);\r\n/**\r\n * This value tells us if `TemplateStringsArray` are typically frozen in the\r\n * current environment.\r\n */\r\nconst frozenTSA = checkFrozen `` && checkFrozen `\\0` && checkFrozen `\\n` && checkFrozen `\\u0000`;\r\n/** Polyfill of https://github.com/tc39/proposal-array-is-template-object */\r\nfunction isTemplateObject(templateObj) {\r\n    /*\r\n     * ############################## WARNING ##############################\r\n     *\r\n     * If you are reading this code to understand how to create a value\r\n     * that satisfies this check, STOP and read this paragraph.\r\n     *\r\n     * This function is there to ensure that our tagged template functions are\r\n     * always called using the tag syntax fn`...`, rather than the normal\r\n     * function syntax fn(...). Bypassing this check invalidates the guarantees\r\n     * that safevalues provides and will result in security issues in your code.\r\n     *\r\n     * If you are stuck and not sure how to proceed, please reach out to us\r\n     * instead through:\r\n     *  - https://github.com/google/safevalues/issues\r\n     *\r\n     * ############################## WARNING ##############################\r\n     */\r\n    if (!Array.isArray(templateObj) || !Array.isArray(templateObj.raw)) {\r\n        return false;\r\n    }\r\n    if (templateObj.length !== templateObj.raw.length) {\r\n        return false;\r\n    }\r\n    if (!isTranspiled && templateObj === templateObj.raw) {\r\n        // Sometimes transpilers use the same array to save on codesize if the\r\n        // template has no special characters that would cause the values in each\r\n        // array to be different.\r\n        return false;\r\n    }\r\n    if ((!isTranspiled || frozenTSA) && !checkFrozen(templateObj)) {\r\n        // Transpilers typically don't freeze `TemplateStringsArray` objects, but we\r\n        // expect that if they did, they would do it consistently, so we also\r\n        // dynamically check if they do.\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * The name of the Trusted Types policy used by TS safevalues, or empty\r\n * to disable Trusted Types. This duplicates the 'google#safe', but\r\n * can be overridden in tests.\r\n */\r\nlet trustedTypesPolicyName = 'google#safe';\r\n/** Helper to retrieve the value of `window.trustedTypes`. */\r\nfunction trustedTypes() {\r\n    if (typeof window !== 'undefined') {\r\n        return window.trustedTypes;\r\n    }\r\n    return undefined;\r\n}\r\n/**\r\n * Returns window.trustedTypes if Trusted Types are enabled and supported, or\r\n * null otherwise.\r\n */\r\nexport function getTrustedTypes() {\r\n    var _a;\r\n    return trustedTypesPolicyName !== '' ? (_a = trustedTypes()) !== null && _a !== void 0 ? _a : null : null;\r\n}\r\n/**\r\n * The Trusted Types policy used by TS safevalues, or null if Trusted Types\r\n * are not enabled/supported, or undefined if the policy has not been created\r\n * yet.\r\n */\r\nlet trustedTypesPolicy;\r\n/**\r\n * Returns the Trusted Types policy used by TS safevalues, or null if Trusted\r\n * Types are not enabled/supported. The first call to this function will\r\n * create the policy.\r\n */\r\nexport function getTrustedTypesPolicy() {\r\n    var _a, _b;\r\n    if (trustedTypesPolicy === undefined) {\r\n        try {\r\n            trustedTypesPolicy =\r\n                (_b = (_a = getTrustedTypes()) === null || _a === void 0 ? void 0 : _a.createPolicy(trustedTypesPolicyName, {\r\n                    createHTML: (s) => s,\r\n                    createScript: (s) => s,\r\n                    createScriptURL: (s) => s,\r\n                })) !== null && _b !== void 0 ? _b : null;\r\n        }\r\n        catch (_c) {\r\n            // In Chromium versions before 81, trustedTypes.createPolicy throws if\r\n            // called with a name that is already registered, even if no CSP is set.\r\n            // Until users have largely migrated to 81 or above, catch the error not\r\n            // to break the applications functionally. In such case, the code will\r\n            // fall back to using regular Safe Types.\r\n            trustedTypesPolicy = null;\r\n        }\r\n    }\r\n    return trustedTypesPolicy;\r\n}\r\n/** Helpers for tests. */\r\nexport const TEST_ONLY = {\r\n    resetDefaults() {\r\n        trustedTypesPolicy = undefined;\r\n        trustedTypesPolicyName = 'google#safe';\r\n    },\r\n    setTrustedTypesPolicyName(name) {\r\n        trustedTypesPolicyName = name;\r\n    },\r\n};\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport '../environment/dev.js';\r\nimport { ensureTokenIsValid, secretToken } from './secrets.js';\r\nimport { getTrustedTypes, getTrustedTypesPolicy } from './trusted_types.js';\r\n/**\r\n * Runtime implementation of `TrustedHTML` in browsers that don't support it.\r\n */\r\nclass HtmlImpl {\r\n    constructor(html, token) {\r\n        ensureTokenIsValid(token);\r\n        this.privateDoNotAccessOrElseWrappedHtml = html;\r\n    }\r\n    toString() {\r\n        return this.privateDoNotAccessOrElseWrappedHtml.toString();\r\n    }\r\n}\r\nfunction createTrustedHtmlOrPolyfill(html, trusted) {\r\n    return (trusted !== null && trusted !== void 0 ? trusted : new HtmlImpl(html, secretToken));\r\n}\r\nconst GlobalTrustedHTML = typeof window !== 'undefined' ? window.TrustedHTML : undefined;\r\n/**\r\n * Also exports the constructor so that instanceof checks work.\r\n */\r\nexport const SafeHtml = (GlobalTrustedHTML !== null && GlobalTrustedHTML !== void 0 ? GlobalTrustedHTML : HtmlImpl);\r\n/**\r\n * Builds a new `SafeHtml` from the given string, without enforcing safety\r\n * guarantees. It may cause side effects by creating a Trusted Types policy.\r\n * This shouldn't be exposed to application developers, and must only be used as\r\n * a step towards safe builders or safe constants.\r\n */\r\nexport function createHtmlInternal(html) {\r\n    var _a;\r\n    /** @noinline */\r\n    const noinlineHtml = html;\r\n    return createTrustedHtmlOrPolyfill(noinlineHtml, (_a = getTrustedTypesPolicy()) === null || _a === void 0 ? void 0 : _a.createHTML(noinlineHtml));\r\n}\r\n/**\r\n * An empty `SafeHtml` constant.\r\n * Unlike the function above, using this will not create a policy.\r\n */\r\nexport const EMPTY_HTML = /* #__PURE__ */ (() => { var _a; return createTrustedHtmlOrPolyfill('', (_a = getTrustedTypes()) === null || _a === void 0 ? void 0 : _a.emptyHTML); })();\r\n/**\r\n * Checks if the given value is a `SafeHtml` instance.\r\n */\r\nexport function isHtml(value) {\r\n    var _a;\r\n    return ((_a = getTrustedTypes()) === null || _a === void 0 ? void 0 : _a.isHTML(value)) || value instanceof HtmlImpl;\r\n}\r\n/**\r\n * Returns the value of the passed `SafeHtml` object while ensuring it\r\n * has the correct type.\r\n *\r\n * Returns a native `TrustedHTML` or a string if Trusted Types are disabled.\r\n */\r\nexport function unwrapHtml(value) {\r\n    var _a;\r\n    if ((_a = getTrustedTypes()) === null || _a === void 0 ? void 0 : _a.isHTML(value)) {\r\n        return value;\r\n    }\r\n    else if (value instanceof HtmlImpl) {\r\n        return value.privateDoNotAccessOrElseWrappedHtml;\r\n    }\r\n    else {\r\n        let message = '';\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            message = 'Unexpected type when unwrapping SafeHtml';\r\n        }\r\n        throw new Error(message);\r\n    }\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport '../environment/dev.js';\r\nimport { ensureTokenIsValid, secretToken } from './secrets.js';\r\nimport { getTrustedTypes, getTrustedTypesPolicy } from './trusted_types.js';\r\n/**\r\n * Runtime implementation of `TrustedScriptURL` in browsers that don't support\r\n * it.\r\n */\r\nclass ResourceUrlImpl {\r\n    constructor(url, token) {\r\n        ensureTokenIsValid(token);\r\n        this.privateDoNotAccessOrElseWrappedResourceUrl = url;\r\n    }\r\n    toString() {\r\n        return this.privateDoNotAccessOrElseWrappedResourceUrl.toString();\r\n    }\r\n}\r\nconst GlobalTrustedScriptURL = typeof window !== 'undefined' ? window.TrustedScriptURL : undefined;\r\n/**\r\n * Also exports the constructor so that instanceof checks work.\r\n */\r\nexport const TrustedResourceUrl = (GlobalTrustedScriptURL !== null && GlobalTrustedScriptURL !== void 0 ? GlobalTrustedScriptURL : ResourceUrlImpl);\r\n/**\r\n * Builds a new `TrustedResourceUrl` from the given string, without\r\n * enforcing safety guarantees. It may cause side effects by creating a Trusted\r\n * Types policy. This shouldn't be exposed to application developers, and must\r\n * only be used as a step towards safe builders or safe constants.\r\n */\r\nexport function createResourceUrlInternal(url) {\r\n    var _a;\r\n    /** @noinline */\r\n    const noinlineUrl = url;\r\n    const trustedScriptURL = (_a = getTrustedTypesPolicy()) === null || _a === void 0 ? void 0 : _a.createScriptURL(noinlineUrl);\r\n    return (trustedScriptURL !== null && trustedScriptURL !== void 0 ? trustedScriptURL : new ResourceUrlImpl(noinlineUrl, secretToken));\r\n}\r\n/**\r\n * Checks if the given value is a `TrustedResourceUrl` instance.\r\n */\r\nexport function isResourceUrl(value) {\r\n    var _a;\r\n    return (((_a = getTrustedTypes()) === null || _a === void 0 ? void 0 : _a.isScriptURL(value)) || value instanceof ResourceUrlImpl);\r\n}\r\n/**\r\n * Returns the value of the passed `TrustedResourceUrl` object while ensuring it\r\n * has the correct type.\r\n *\r\n * Returns a native `TrustedScriptURL` or a string if Trusted Types are\r\n * disabled.\r\n */\r\nexport function unwrapResourceUrl(value) {\r\n    var _a;\r\n    if ((_a = getTrustedTypes()) === null || _a === void 0 ? void 0 : _a.isScriptURL(value)) {\r\n        return value;\r\n    }\r\n    else if (value instanceof ResourceUrlImpl) {\r\n        return value.privateDoNotAccessOrElseWrappedResourceUrl;\r\n    }\r\n    else {\r\n        let message = '';\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            message = 'Unexpected type when unwrapping TrustedResourceUrl';\r\n        }\r\n        throw new Error(message);\r\n    }\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport '../environment/dev.js';\r\nimport { ensureTokenIsValid, secretToken } from './secrets.js';\r\nimport { getTrustedTypes, getTrustedTypesPolicy } from './trusted_types.js';\r\n/**\r\n * Runtime implementation of `TrustedScript` in browswers that don't support it.\r\n * script element.\r\n */\r\nclass ScriptImpl {\r\n    constructor(script, token) {\r\n        ensureTokenIsValid(token);\r\n        this.privateDoNotAccessOrElseWrappedScript = script;\r\n    }\r\n    toString() {\r\n        return this.privateDoNotAccessOrElseWrappedScript.toString();\r\n    }\r\n}\r\nfunction createTrustedScriptOrPolyfill(script, trusted) {\r\n    return (trusted !== null && trusted !== void 0 ? trusted : new ScriptImpl(script, secretToken));\r\n}\r\nconst GlobalTrustedScript = typeof window !== 'undefined' ? window.TrustedScript : undefined;\r\n/**\r\n * Also exports the constructor so that instanceof checks work.\r\n */\r\nexport const SafeScript = (GlobalTrustedScript !== null && GlobalTrustedScript !== void 0 ? GlobalTrustedScript : ScriptImpl);\r\n/**\r\n * Builds a new `SafeScript` from the given string, without enforcing\r\n * safety guarantees. It may cause side effects by creating a Trusted Types\r\n * policy. This shouldn't be exposed to application developers, and must only be\r\n * used as a step towards safe builders or safe constants.\r\n */\r\nexport function createScriptInternal(script) {\r\n    var _a;\r\n    /** @noinline */\r\n    const noinlineScript = script;\r\n    return createTrustedScriptOrPolyfill(noinlineScript, (_a = getTrustedTypesPolicy()) === null || _a === void 0 ? void 0 : _a.createScript(noinlineScript));\r\n}\r\n/**\r\n * An empty `SafeScript` constant.\r\n * Unlike the functions above, using this will not create a policy.\r\n */\r\nexport const EMPTY_SCRIPT = /* #__PURE__ */ (() => { var _a; return createTrustedScriptOrPolyfill('', (_a = getTrustedTypes()) === null || _a === void 0 ? void 0 : _a.emptyScript); })();\r\n/**\r\n * Checks if the given value is a `SafeScript` instance.\r\n */\r\nexport function isScript(value) {\r\n    var _a;\r\n    return ((_a = getTrustedTypes()) === null || _a === void 0 ? void 0 : _a.isScript(value)) || value instanceof ScriptImpl;\r\n}\r\n/**\r\n * Returns the value of the passed `SafeScript` object while ensuring it\r\n * has the correct type.\r\n *\r\n * Returns a native `TrustedScript` or a string if Trusted Types are disabled.\r\n */\r\nexport function unwrapScript(value) {\r\n    var _a;\r\n    if ((_a = getTrustedTypes()) === null || _a === void 0 ? void 0 : _a.isScript(value)) {\r\n        return value;\r\n    }\r\n    else if (value instanceof ScriptImpl) {\r\n        return value.privateDoNotAccessOrElseWrappedScript;\r\n    }\r\n    else {\r\n        let message = '';\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            message = 'Unexpected type when unwrapping SafeScript';\r\n        }\r\n        throw new Error(message);\r\n    }\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport { createHtmlInternal, isHtml, unwrapHtml, } from '../internals/html_impl.js';\r\nimport { unwrapResourceUrl, } from '../internals/resource_url_impl.js';\r\nimport { unwrapScript } from '../internals/script_impl.js';\r\n/**\r\n * Returns HTML-escaped text as a `SafeHtml` object. No-op if value is already a\r\n * SafeHtml instance.\r\n *\r\n * Available options:\r\n * - `preserveSpaces` turns every second consecutive space character into its\r\n * HTML entity representation (`&#160;`).\r\n * - `preserveNewlines` turns newline characters into breaks (`<br>`).\r\n * - `preserveTabs` wraps tab characters in a span with style=white-space:pre.\r\n */\r\nexport function htmlEscape(value, options = {}) {\r\n    if (isHtml(value)) {\r\n        return value;\r\n    }\r\n    let htmlEscapedString = htmlEscapeToString(String(value));\r\n    if (options.preserveSpaces) {\r\n        // Do this first to ensure we preserve spaces after newlines and tabs.\r\n        htmlEscapedString = htmlEscapedString.replace(/(^|[\\r\\n\\t ]) /g, '$1&#160;');\r\n    }\r\n    if (options.preserveNewlines) {\r\n        htmlEscapedString = htmlEscapedString.replace(/(\\r\\n|\\n|\\r)/g, '<br>');\r\n    }\r\n    if (options.preserveTabs) {\r\n        htmlEscapedString = htmlEscapedString.replace(/(\\t+)/g, '<span style=\"white-space:pre\">$1</span>');\r\n    }\r\n    return createHtmlInternal(htmlEscapedString);\r\n}\r\n/**\r\n * Creates a `SafeHtml` representing a script tag with inline script content.\r\n */\r\nexport function scriptToHtml(script, options = {}) {\r\n    const unwrappedScript = unwrapScript(script).toString();\r\n    let stringTag = `<script`;\r\n    if (options.id) {\r\n        stringTag += ` id=\"${htmlEscapeToString(options.id)}\"`;\r\n    }\r\n    if (options.nonce) {\r\n        stringTag += ` nonce=\"${htmlEscapeToString(options.nonce)}\"`;\r\n    }\r\n    if (options.type) {\r\n        stringTag += ` type=\"${htmlEscapeToString(options.type)}\"`;\r\n    }\r\n    if (options.defer) {\r\n        stringTag += ` defer`;\r\n    }\r\n    stringTag += `>${unwrappedScript}\\u003C/script>`;\r\n    return createHtmlInternal(stringTag);\r\n}\r\n/**\r\n * Creates a `SafeHtml` representing a script tag with the src attribute.\r\n * This also supports CSP nonces and async loading.\r\n */\r\nexport function scriptUrlToHtml(src, options = {}) {\r\n    const unwrappedSrc = unwrapResourceUrl(src).toString();\r\n    let stringTag = `<script src=\"${htmlEscapeToString(unwrappedSrc)}\"`;\r\n    if (options.async) {\r\n        stringTag += ' async';\r\n    }\r\n    if (options.customElement) {\r\n        stringTag += ` custom-element=\"${htmlEscapeToString(options.customElement)}\"`;\r\n    }\r\n    if (options.defer) {\r\n        stringTag += ` defer`;\r\n    }\r\n    if (options.id) {\r\n        stringTag += ` id=\"${htmlEscapeToString(options.id)}\"`;\r\n    }\r\n    if (options.nonce) {\r\n        stringTag += ` nonce=\"${htmlEscapeToString(options.nonce)}\"`;\r\n    }\r\n    if (options.type) {\r\n        stringTag += ` type=\"${htmlEscapeToString(options.type)}\"`;\r\n    }\r\n    if (options.crossorigin) {\r\n        stringTag += ` crossorigin=\"${htmlEscapeToString(options.crossorigin)}\"`;\r\n    }\r\n    stringTag += '>\\u003C/script>';\r\n    return createHtmlInternal(stringTag);\r\n}\r\n/**\r\n * HTML-escapes the given text (`&`, `<`, `>`, `\"` and `'`).\r\n */\r\nfunction htmlEscapeToString(text) {\r\n    const escaped = text\r\n        .replace(/&/g, '&amp;')\r\n        .replace(/</g, '&lt;')\r\n        .replace(/>/g, '&gt;')\r\n        .replace(/\"/g, '&quot;')\r\n        .replace(/'/g, '&apos;');\r\n    return escaped;\r\n}\r\n/** Creates a `SafeHtml` value by concatenating multiple `SafeHtml`s. */\r\nexport function concatHtmls(htmls) {\r\n    return joinHtmls('', htmls);\r\n}\r\n/**\r\n * Creates a `SafeHtml` value by concatenating multiple `SafeHtml`s interleaved\r\n * with a separator.\r\n */\r\nexport function joinHtmls(separator, htmls) {\r\n    const separatorHtml = htmlEscape(separator);\r\n    return createHtmlInternal(htmls\r\n        .map((value) => unwrapHtml(htmlEscape(value)))\r\n        .join(unwrapHtml(separatorHtml).toString()));\r\n}\r\n/**\r\n * Returns a `SafeHtml` that contains `<!DOCTYPE html>`.\r\n * This is defined as a function to prevent the definition of a Trusted Type\r\n * policy when simply importing safevalues.\r\n */\r\nexport function doctypeHtml() {\r\n    return createHtmlInternal('<!DOCTYPE html>');\r\n}\r\n/**\r\n * Non-exported version of `nodeToHtml`, with an explicit temporary root to\r\n * accomodate for the sanitizer's user case.\r\n */\r\nexport function nodeToHtmlInternal(node, temporaryRoot) {\r\n    temporaryRoot.appendChild(node);\r\n    // XML serialization is preferred over HTML serialization as it is\r\n    // stricter and makes sure all attributes are properly escaped, avoiding\r\n    // cases where the tree might mutate when parsed again later due to the\r\n    // complexities of the HTML parsing algorithm\r\n    let serializedNewTree = new XMLSerializer().serializeToString(temporaryRoot);\r\n    // We remove the outer most element as this is the span node created as\r\n    // the root for the sanitized tree and contains a spurious xmlns attribute\r\n    // from the XML serialization step.\r\n    serializedNewTree = serializedNewTree.slice(serializedNewTree.indexOf('>') + 1, serializedNewTree.lastIndexOf('</'));\r\n    return createHtmlInternal(serializedNewTree);\r\n}\r\n/**\r\n * Serializes a Node into it's HTML representation.\r\n *\r\n * Note: this method uses strict XML serialization to mitigate mutation issues\r\n * when the html is then re-parsed by the browser.\r\n */\r\nexport function nodeToHtml(node) {\r\n    const tempRoot = document.createElement('span');\r\n    return nodeToHtmlInternal(node, tempRoot);\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/** Mark an expression as being free of side effects. */\r\nexport function pure(valueOf) {\r\n    // This odd looking expression is a workaround specific to the Closure\r\n    // compiler to mark an expression as pure.\r\n    return { valueOf }.valueOf();\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport '../environment/dev.js';\r\n/**\r\n * Extracts the scheme from the given URL. If the URL is relative, https: is\r\n * assumed.\r\n * @param url The URL to extract the scheme from.\r\n * @return the URL scheme.\r\n */\r\nexport function extractScheme(url) {\r\n    let parsedUrl;\r\n    try {\r\n        parsedUrl = new URL(url);\r\n    }\r\n    catch (e) {\r\n        // According to https://url.spec.whatwg.org/#constructors, the URL\r\n        // constructor with one parameter throws if `url` is not absolute. In this\r\n        // case, we are sure that no explicit scheme (javascript: ) is set.\r\n        // This can also be a URL parsing error, but in this case the URL won't be\r\n        // run anyway.\r\n        return 'https:';\r\n    }\r\n    return parsedUrl.protocol;\r\n}\r\n// We can't use an ES6 Set here because gws somehow depends on this code and\r\n// doesn't want to pay the cost of a polyfill.\r\nconst ALLOWED_SCHEMES = ['data:', 'http:', 'https:', 'mailto:', 'ftp:'];\r\n/**\r\n * A pattern that blocks javascript: URLs. Matches\r\n * (a) Urls with an explicit scheme that is not javascript and that only has\r\n *     alphanumeric or [.-+_] characters; or\r\n * (b) Urls with no explicit scheme. The pattern allows the first colon\r\n *     (`:`) character to appear after one of  the `/` `?` or `#` characters,\r\n *     which means the colon appears in path, query or fragment part of the URL.\r\n */\r\nexport const IS_NOT_JAVASCRIPT_URL_PATTERN = /^\\s*(?!javascript:)(?:[\\w+.-]+:|[^:/?#]*(?:[/?#]|$))/i;\r\n/**\r\n * Checks whether a urls has a `javascript:` scheme.\r\n * If the url has a `javascript:` scheme, reports it and returns true.\r\n * Otherwise, returns false.\r\n */\r\nexport function reportJavaScriptUrl(url) {\r\n    const hasJavascriptUrlScheme = !IS_NOT_JAVASCRIPT_URL_PATTERN.test(url);\r\n    if (hasJavascriptUrlScheme) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            console.error(`A URL with content '${url}' was sanitized away.`);\r\n        }\r\n    }\r\n    return hasJavascriptUrlScheme;\r\n}\r\n/**\r\n * Checks that the URL scheme is not javascript.\r\n * The URL parsing relies on the URL API in browsers that support it.\r\n * @param url The URL to sanitize for a SafeUrl sink.\r\n * @return undefined if url has a javascript: scheme, the original URL\r\n *     otherwise.\r\n */\r\nexport function sanitizeJavaScriptUrl(url) {\r\n    if (reportJavaScriptUrl(url)) {\r\n        return undefined;\r\n    }\r\n    return url;\r\n}\r\n/**\r\n * Adapter to sanitize string URLs in DOM sink wrappers.\r\n * @return undefined if the URL was sanitized.\r\n */\r\nexport function unwrapUrlOrSanitize(url) {\r\n    return sanitizeJavaScriptUrl(url);\r\n}\r\n/**\r\n * Sanitizes a URL restrictively.\r\n * This sanitizer protects against XSS and potentially other uncommon and\r\n * undesirable schemes that an attacker could use e.g. phishing (tel:, callto:\r\n * ssh: etc schemes). This sanitizer is primarily meant to be used by the HTML\r\n * sanitizer.\r\n */\r\nexport function restrictivelySanitizeUrl(url) {\r\n    const parsedScheme = extractScheme(url);\r\n    if (parsedScheme !== undefined &&\r\n        ALLOWED_SCHEMES.indexOf(parsedScheme.toLowerCase()) !== -1) {\r\n        return url;\r\n    }\r\n    return 'about:invalid#zClosurez';\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport { unwrapHtml } from '../../internals/html_impl.js';\r\n/** Safely creates a contextualFragment. */\r\nexport function createContextualFragment(range, html) {\r\n    return range.createContextualFragment(unwrapHtml(html));\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport { createContextualFragment } from '../../dom/globals/range.js';\r\nimport '../../environment/dev.js';\r\nimport { createHtmlInternal } from '../../internals/html_impl.js';\r\n/**\r\n * Returns a fragment that contains the parsed HTML for `dirtyHtml` without\r\n * executing any of the potential payload.\r\n */\r\nexport function createInertFragment(dirtyHtml, inertDocument) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        // We are checking if the function was accidentally called with non-inert\r\n        // document. One observable difference between live and inert documents\r\n        // is that live document has a `defaultView` equal to `window`, while\r\n        // inert document has a `defaultView` equal to `null`.\r\n        if (inertDocument.defaultView) {\r\n            throw new Error('createInertFragment called with non-inert document');\r\n        }\r\n    }\r\n    const range = inertDocument.createRange();\r\n    range.selectNode(inertDocument.body);\r\n    // This call is only used to create an inert tree for the sanitizer to\r\n    // further process and is never returned directly to the caller. We can't use\r\n    // a reviewed conversion in order to avoid an import loop.\r\n    const temporarySafeHtml = createHtmlInternal(dirtyHtml);\r\n    return createContextualFragment(range, temporarySafeHtml);\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * Library that provides safe getters for different node properties and\r\n * checks for clobbering.\r\n */\r\n/** Gets a reasonable nodeName, even for clobbered nodes. */\r\nexport function getNodeName(node) {\r\n    const nodeName = node.nodeName;\r\n    // If the property is clobbered, assume it is an `HTMLFormElement`.\r\n    return typeof nodeName === 'string' ? nodeName : 'FORM';\r\n}\r\n/** Returns true if the object passed is a Text node. */\r\nexport function isText(node) {\r\n    // The property cannot get clobbered on Text nodes.\r\n    return node.nodeType === 3; // Node.TEXT_NODE\r\n}\r\n/** Returns true if the object passed is an Element node. */\r\nexport function isElement(node) {\r\n    const nodeType = node.nodeType;\r\n    // If the property is clobbered, we can assume it is an `HTMLFormElement`, and\r\n    // thus an `Element`.\r\n    return nodeType === 1 /* Node.ELEMENT_NODE */ || typeof nodeType !== 'number';\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * The type of the hints that can be passed to a ResourceUrlPolicy.\r\n */\r\nexport var ResourceUrlPolicyHintsType;\r\n(function (ResourceUrlPolicyHintsType) {\r\n    ResourceUrlPolicyHintsType[ResourceUrlPolicyHintsType[\"STYLE_TAG\"] = 0] = \"STYLE_TAG\";\r\n    ResourceUrlPolicyHintsType[ResourceUrlPolicyHintsType[\"STYLE_ATTRIBUTE\"] = 1] = \"STYLE_ATTRIBUTE\";\r\n    ResourceUrlPolicyHintsType[ResourceUrlPolicyHintsType[\"HTML_ATTRIBUTE\"] = 2] = \"HTML_ATTRIBUTE\";\r\n})(ResourceUrlPolicyHintsType || (ResourceUrlPolicyHintsType = {}));\r\n/**\r\n * Parses a URL. If the URL is invalid, returns URL instance with\r\n * `about:invalid`.\r\n */\r\nexport function parseUrl(value) {\r\n    try {\r\n        return new URL(value, window.document.baseURI);\r\n    }\r\n    catch (e) {\r\n        return new URL('about:invalid');\r\n    }\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/** Class for holding element and attribute policies used for sanitization. */\r\nexport class SanitizerTable {\r\n    constructor(allowedElements, elementPolicies, allowedGlobalAttributes, globalAttributePolicies, globallyAllowedAttributePrefixes) {\r\n        this.allowedElements = allowedElements;\r\n        this.elementPolicies = elementPolicies;\r\n        this.allowedGlobalAttributes = allowedGlobalAttributes;\r\n        this.globalAttributePolicies = globalAttributePolicies;\r\n        this.globallyAllowedAttributePrefixes = globallyAllowedAttributePrefixes;\r\n    }\r\n    isAllowedElement(elementName) {\r\n        // Note: `HTMLFormElement`s are always dropped, supporting them is very\r\n        // costly because of the DOM clobberring they can cause. The additional code\r\n        // size required to properly work around DOM clobberring issues is large and\r\n        // shouldn't be put on every user of the sanitizer. Thoroughly review\r\n        // b/210975025 and the CLs linked there before you start allowing form\r\n        // elements.\r\n        return (elementName !== 'FORM' &&\r\n            (this.allowedElements.has(elementName) ||\r\n                this.elementPolicies.has(elementName)));\r\n    }\r\n    getAttributePolicy(attributeName, elementName) {\r\n        const elementPolicy = this.elementPolicies.get(elementName);\r\n        if (elementPolicy === null || elementPolicy === void 0 ? void 0 : elementPolicy.has(attributeName)) {\r\n            return elementPolicy.get(attributeName);\r\n        }\r\n        if (this.allowedGlobalAttributes.has(attributeName)) {\r\n            return { policyAction: AttributePolicyAction.KEEP };\r\n        }\r\n        const globalPolicy = this.globalAttributePolicies.get(attributeName);\r\n        if (globalPolicy) {\r\n            return globalPolicy;\r\n        }\r\n        if (this.globallyAllowedAttributePrefixes &&\r\n            [...this.globallyAllowedAttributePrefixes].some((prefix) => attributeName.indexOf(prefix) === 0)) {\r\n            return { policyAction: AttributePolicyAction.KEEP };\r\n        }\r\n        return { policyAction: AttributePolicyAction.DROP };\r\n    }\r\n}\r\n/**\r\n * Values derived from\r\n * https://godoc.corp.google.com/pkg/google3/third_party/safehtml/sanitizer/policy#AttributePolicy\r\n */\r\nexport var AttributePolicyAction;\r\n(function (AttributePolicyAction) {\r\n    AttributePolicyAction[AttributePolicyAction[\"DROP\"] = 0] = \"DROP\";\r\n    AttributePolicyAction[AttributePolicyAction[\"KEEP\"] = 1] = \"KEEP\";\r\n    AttributePolicyAction[AttributePolicyAction[\"KEEP_AND_SANITIZE_URL\"] = 2] = \"KEEP_AND_SANITIZE_URL\";\r\n    AttributePolicyAction[AttributePolicyAction[\"KEEP_AND_NORMALIZE\"] = 3] = \"KEEP_AND_NORMALIZE\";\r\n    // This action is currently equivalent to KEEP as there is no style sanitizer.\r\n    AttributePolicyAction[AttributePolicyAction[\"KEEP_AND_SANITIZE_STYLE\"] = 4] = \"KEEP_AND_SANITIZE_STYLE\";\r\n    AttributePolicyAction[AttributePolicyAction[\"KEEP_AND_USE_RESOURCE_URL_POLICY\"] = 5] = \"KEEP_AND_USE_RESOURCE_URL_POLICY\";\r\n    AttributePolicyAction[AttributePolicyAction[\"KEEP_AND_USE_RESOURCE_URL_POLICY_FOR_SRCSET\"] = 6] = \"KEEP_AND_USE_RESOURCE_URL_POLICY_FOR_SRCSET\";\r\n})(AttributePolicyAction || (AttributePolicyAction = {}));\r\n// From the spec:\r\n// https://html.spec.whatwg.org/multipage/custom-elements.html#prod-potentialcustomelementname:~:text=name%20must%20not%20be%20any%20of%20the%20following%3A\r\nconst FORBIDDEN_CUSTOM_ELEMENT_NAMES = new Set([\r\n    'ANNOTATION-XML',\r\n    'COLOR-PROFILE',\r\n    'FONT-FACE',\r\n    'FONT-FACE-SRC',\r\n    'FONT-FACE-URI',\r\n    'FONT-FACE-FORMAT',\r\n    'FONT-FACE-NAME',\r\n    'MISSING-GLYPH',\r\n]);\r\n/**\r\n * Helper for checking if an element tag is a custom element.\r\n */\r\nexport function isCustomElement(tag) {\r\n    return (!FORBIDDEN_CUSTOM_ELEMENT_NAMES.has(tag.toUpperCase()) &&\r\n        /^[a-z][-_.a-z0-9]*-[-_.a-z0-9]*$/i.test(tag));\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/* GENERATED CODE, DO NOT MODIFY */\r\nimport { pure } from '../../../internals/pure.js';\r\nimport { AttributePolicyAction, SanitizerTable, } from './sanitizer_table.js';\r\nconst ALLOWED_ELEMENTS = [\r\n    'ARTICLE',\r\n    'SECTION',\r\n    'NAV',\r\n    'ASIDE',\r\n    'H1',\r\n    'H2',\r\n    'H3',\r\n    'H4',\r\n    'H5',\r\n    'H6',\r\n    'HEADER',\r\n    'FOOTER',\r\n    'ADDRESS',\r\n    'P',\r\n    'HR',\r\n    'PRE',\r\n    'BLOCKQUOTE',\r\n    'OL',\r\n    'UL',\r\n    'LH',\r\n    'LI',\r\n    'DL',\r\n    'DT',\r\n    'DD',\r\n    'FIGURE',\r\n    'FIGCAPTION',\r\n    'MAIN',\r\n    'DIV',\r\n    'EM',\r\n    'STRONG',\r\n    'SMALL',\r\n    'S',\r\n    'CITE',\r\n    'Q',\r\n    'DFN',\r\n    'ABBR',\r\n    'RUBY',\r\n    'RB',\r\n    'RT',\r\n    'RTC',\r\n    'RP',\r\n    'DATA',\r\n    'TIME',\r\n    'CODE',\r\n    'VAR',\r\n    'SAMP',\r\n    'KBD',\r\n    'SUB',\r\n    'SUP',\r\n    'I',\r\n    'B',\r\n    'U',\r\n    'MARK',\r\n    'BDI',\r\n    'BDO',\r\n    'SPAN',\r\n    'BR',\r\n    'WBR',\r\n    'INS',\r\n    'DEL',\r\n    'PICTURE',\r\n    'PARAM',\r\n    'TRACK',\r\n    'MAP',\r\n    'TABLE',\r\n    'CAPTION',\r\n    'COLGROUP',\r\n    'COL',\r\n    'TBODY',\r\n    'THEAD',\r\n    'TFOOT',\r\n    'TR',\r\n    'TD',\r\n    'TH',\r\n    'SELECT',\r\n    'DATALIST',\r\n    'OPTGROUP',\r\n    'OPTION',\r\n    'OUTPUT',\r\n    'PROGRESS',\r\n    'METER',\r\n    'FIELDSET',\r\n    'LEGEND',\r\n    'DETAILS',\r\n    'SUMMARY',\r\n    'MENU',\r\n    'DIALOG',\r\n    'SLOT',\r\n    'CANVAS',\r\n    'FONT',\r\n    'CENTER',\r\n    'ACRONYM',\r\n    'BASEFONT',\r\n    'BIG',\r\n    'DIR',\r\n    'HGROUP',\r\n    'STRIKE',\r\n    'TT',\r\n];\r\nconst ELEMENT_POLICIES = [\r\n    [\r\n        'A',\r\n        new Map([\r\n            [\r\n                'href',\r\n                {\r\n                    policyAction: AttributePolicyAction.KEEP_AND_SANITIZE_URL,\r\n                },\r\n            ],\r\n        ]),\r\n    ],\r\n    [\r\n        'AREA',\r\n        new Map([\r\n            [\r\n                'href',\r\n                {\r\n                    policyAction: AttributePolicyAction.KEEP_AND_SANITIZE_URL,\r\n                },\r\n            ],\r\n        ]),\r\n    ],\r\n    [\r\n        'LINK',\r\n        new Map([\r\n            [\r\n                'href',\r\n                {\r\n                    policyAction: AttributePolicyAction.KEEP_AND_USE_RESOURCE_URL_POLICY,\r\n                    conditions: new Map([\r\n                        [\r\n                            'rel',\r\n                            new Set([\r\n                                'alternate',\r\n                                'author',\r\n                                'bookmark',\r\n                                'canonical',\r\n                                'cite',\r\n                                'help',\r\n                                'icon',\r\n                                'license',\r\n                                'next',\r\n                                'prefetch',\r\n                                'dns-prefetch',\r\n                                'prerender',\r\n                                'preconnect',\r\n                                'preload',\r\n                                'prev',\r\n                                'search',\r\n                                'subresource',\r\n                            ]),\r\n                        ],\r\n                    ]),\r\n                },\r\n            ],\r\n        ]),\r\n    ],\r\n    [\r\n        'SOURCE',\r\n        new Map([\r\n            [\r\n                'src',\r\n                {\r\n                    policyAction: AttributePolicyAction.KEEP_AND_USE_RESOURCE_URL_POLICY,\r\n                },\r\n            ],\r\n            [\r\n                'srcset',\r\n                {\r\n                    policyAction: AttributePolicyAction.KEEP_AND_USE_RESOURCE_URL_POLICY_FOR_SRCSET,\r\n                },\r\n            ],\r\n        ]),\r\n    ],\r\n    [\r\n        'IMG',\r\n        new Map([\r\n            [\r\n                'src',\r\n                {\r\n                    policyAction: AttributePolicyAction.KEEP_AND_USE_RESOURCE_URL_POLICY,\r\n                },\r\n            ],\r\n            [\r\n                'srcset',\r\n                {\r\n                    policyAction: AttributePolicyAction.KEEP_AND_USE_RESOURCE_URL_POLICY_FOR_SRCSET,\r\n                },\r\n            ],\r\n        ]),\r\n    ],\r\n    [\r\n        'VIDEO',\r\n        new Map([\r\n            [\r\n                'src',\r\n                {\r\n                    policyAction: AttributePolicyAction.KEEP_AND_USE_RESOURCE_URL_POLICY,\r\n                },\r\n            ],\r\n        ]),\r\n    ],\r\n    [\r\n        'AUDIO',\r\n        new Map([\r\n            [\r\n                'src',\r\n                {\r\n                    policyAction: AttributePolicyAction.KEEP_AND_USE_RESOURCE_URL_POLICY,\r\n                },\r\n            ],\r\n        ]),\r\n    ],\r\n];\r\nconst ALLOWED_GLOBAL_ATTRIBUTES = [\r\n    'title',\r\n    'aria-atomic',\r\n    'aria-autocomplete',\r\n    'aria-busy',\r\n    'aria-checked',\r\n    'aria-current',\r\n    'aria-disabled',\r\n    'aria-dropeffect',\r\n    'aria-expanded',\r\n    'aria-haspopup',\r\n    'aria-hidden',\r\n    'aria-invalid',\r\n    'aria-label',\r\n    'aria-level',\r\n    'aria-live',\r\n    'aria-multiline',\r\n    'aria-multiselectable',\r\n    'aria-orientation',\r\n    'aria-posinset',\r\n    'aria-pressed',\r\n    'aria-readonly',\r\n    'aria-relevant',\r\n    'aria-required',\r\n    'aria-selected',\r\n    'aria-setsize',\r\n    'aria-sort',\r\n    'aria-valuemax',\r\n    'aria-valuemin',\r\n    'aria-valuenow',\r\n    'aria-valuetext',\r\n    'alt',\r\n    'align',\r\n    'autocapitalize',\r\n    'autocomplete',\r\n    'autocorrect',\r\n    'autofocus',\r\n    'autoplay',\r\n    'bgcolor',\r\n    'border',\r\n    'cellpadding',\r\n    'cellspacing',\r\n    'checked',\r\n    'color',\r\n    'cols',\r\n    'colspan',\r\n    'controls',\r\n    'datetime',\r\n    'disabled',\r\n    'download',\r\n    'draggable',\r\n    'enctype',\r\n    'face',\r\n    'formenctype',\r\n    'frameborder',\r\n    'height',\r\n    'hreflang',\r\n    'hidden',\r\n    'ismap',\r\n    'label',\r\n    'lang',\r\n    'loop',\r\n    'max',\r\n    'maxlength',\r\n    'media',\r\n    'minlength',\r\n    'min',\r\n    'multiple',\r\n    'muted',\r\n    'nonce',\r\n    'open',\r\n    'placeholder',\r\n    'preload',\r\n    'rel',\r\n    'required',\r\n    'reversed',\r\n    'role',\r\n    'rows',\r\n    'rowspan',\r\n    'selected',\r\n    'shape',\r\n    'size',\r\n    'sizes',\r\n    'slot',\r\n    'span',\r\n    'spellcheck',\r\n    'start',\r\n    'step',\r\n    'summary',\r\n    'translate',\r\n    'type',\r\n    'valign',\r\n    'value',\r\n    'width',\r\n    'wrap',\r\n    'itemscope',\r\n    'itemtype',\r\n    'itemid',\r\n    'itemprop',\r\n    'itemref',\r\n];\r\nconst GLOBAL_ATTRIBUTE_POLICIES = [\r\n    [\r\n        'dir',\r\n        {\r\n            policyAction: AttributePolicyAction.KEEP_AND_NORMALIZE,\r\n            conditions: /* #__PURE__ */ pure(() => {\r\n                return new Map([\r\n                    ['dir', new Set(['auto', 'ltr', 'rtl'])],\r\n                ]);\r\n            }),\r\n        },\r\n    ],\r\n    [\r\n        'async',\r\n        {\r\n            policyAction: AttributePolicyAction.KEEP_AND_NORMALIZE,\r\n            conditions: /* #__PURE__ */ pure(() => {\r\n                return new Map([\r\n                    ['async', new Set(['async'])],\r\n                ]);\r\n            }),\r\n        },\r\n    ],\r\n    [\r\n        'cite',\r\n        {\r\n            policyAction: AttributePolicyAction.KEEP_AND_SANITIZE_URL,\r\n        },\r\n    ],\r\n    [\r\n        'loading',\r\n        {\r\n            policyAction: AttributePolicyAction.KEEP_AND_NORMALIZE,\r\n            conditions: /* #__PURE__ */ pure(() => {\r\n                return new Map([\r\n                    ['loading', new Set(['eager', 'lazy'])],\r\n                ]);\r\n            }),\r\n        },\r\n    ],\r\n    [\r\n        'poster',\r\n        {\r\n            policyAction: AttributePolicyAction.KEEP_AND_SANITIZE_URL,\r\n        },\r\n    ],\r\n    [\r\n        'target',\r\n        {\r\n            policyAction: AttributePolicyAction.KEEP_AND_NORMALIZE,\r\n            conditions: /* #__PURE__ */ pure(() => {\r\n                return new Map([\r\n                    ['target', new Set(['_self', '_blank'])],\r\n                ]);\r\n            }),\r\n        },\r\n    ],\r\n];\r\n/**\r\n * Sanitizer table for the default sanitizer configuration\r\n *\r\n */\r\nexport const DEFAULT_SANITIZER_TABLE = new SanitizerTable(new Set(ALLOWED_ELEMENTS), new Map(ELEMENT_POLICIES), new Set(ALLOWED_GLOBAL_ATTRIBUTES), new Map(GLOBAL_ATTRIBUTE_POLICIES));\r\n/**\r\n * Sanitizer table used by the CSS sanitizer.\r\n */\r\nexport const CSS_SANITIZER_TABLE = new SanitizerTable(new Set(/* #__PURE__ */ pure(() => ALLOWED_ELEMENTS.concat(['STYLE']))), new Map(ELEMENT_POLICIES), \r\n// We allow id, name, and class because they can be used in CSS selectors.\r\n// Shadow DOM ensures that those names don't clash with other names in the\r\n// document.\r\nnew Set(\r\n/* #__PURE__ */ pure(() => ALLOWED_GLOBAL_ATTRIBUTES.concat(['id', 'name', 'class']))), new Map(\r\n/* #__PURE__ */ pure(() => GLOBAL_ATTRIBUTE_POLICIES.concat([\r\n    [\r\n        'style',\r\n        { policyAction: AttributePolicyAction.KEEP_AND_SANITIZE_STYLE },\r\n    ],\r\n]))));\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport '../../environment/dev.js';\r\nimport { pure } from '../../internals/pure.js';\r\nimport { ensureTokenIsValid, secretToken } from '../../internals/secrets.js';\r\nimport { nodeToHtmlInternal } from '../html_builders.js';\r\nimport { restrictivelySanitizeUrl } from '../url_builders.js';\r\nimport { createInertFragment } from './inert_fragment.js';\r\nimport { getNodeName, isElement, isText } from './no_clobber.js';\r\nimport { parseUrl, ResourceUrlPolicyHintsType, } from './resource_url_policy.js';\r\nimport { DEFAULT_SANITIZER_TABLE } from './sanitizer_table/default_sanitizer_table.js';\r\nimport { AttributePolicyAction, } from './sanitizer_table/sanitizer_table.js';\r\n/** Implementation for `HtmlSanitizer` */\r\nexport class HtmlSanitizerImpl {\r\n    constructor(sanitizerTable, token, styleElementSanitizer, styleAttributeSanitizer, resourceUrlPolicy) {\r\n        this.sanitizerTable = sanitizerTable;\r\n        this.styleElementSanitizer = styleElementSanitizer;\r\n        this.styleAttributeSanitizer = styleAttributeSanitizer;\r\n        this.resourceUrlPolicy = resourceUrlPolicy;\r\n        this.changes = [];\r\n        ensureTokenIsValid(token);\r\n    }\r\n    sanitizeAssertUnchanged(html) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            this.changes = [];\r\n        }\r\n        const sanitizedHtml = this.sanitize(html);\r\n        if (process.env.NODE_ENV !== 'production' && this.changes.length !== 0) {\r\n            throw new Error(`Unexpected change to HTML value as a result of sanitization. ` +\r\n                `Input: \"${html}\", sanitized output: \"${sanitizedHtml}\"\\n` +\r\n                `List of changes:${this.changes.join('\\n')}`);\r\n        }\r\n        return sanitizedHtml;\r\n    }\r\n    sanitize(html) {\r\n        const inertDocument = document.implementation.createHTMLDocument('');\r\n        return nodeToHtmlInternal(this.sanitizeToFragmentInternal(html, inertDocument), inertDocument.body);\r\n    }\r\n    sanitizeToFragment(html) {\r\n        const inertDocument = document.implementation.createHTMLDocument('');\r\n        return this.sanitizeToFragmentInternal(html, inertDocument);\r\n    }\r\n    sanitizeToFragmentInternal(html, inertDocument) {\r\n        const dirtyFragment = createInertFragment(html, inertDocument);\r\n        const treeWalker = document.createTreeWalker(dirtyFragment, 5 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_TEXT */, (n) => this.nodeFilter(n));\r\n        // `nextNode` is called so we skip the root `DocumentFragment`.\r\n        let currentNode = treeWalker.nextNode();\r\n        // We create a root element to attach all the children of the body to. We\r\n        // use div as it as a semantic-free, generic container and does not\r\n        // represent anything. This is removed when we serialize the tree back\r\n        // into a string.\r\n        const sanitizedFragment = inertDocument.createDocumentFragment();\r\n        let sanitizedParent = sanitizedFragment;\r\n        while (currentNode !== null) {\r\n            let sanitizedNode;\r\n            if (isText(currentNode)) {\r\n                if (this.styleElementSanitizer &&\r\n                    sanitizedParent.nodeName === 'STYLE') {\r\n                    // TODO(securitymb): The sanitizer should record a change whenever\r\n                    // any meaningful change is made to the stylesheet.\r\n                    const sanitizedCss = this.styleElementSanitizer(currentNode.data);\r\n                    sanitizedNode = this.createTextNode(sanitizedCss);\r\n                }\r\n                else {\r\n                    sanitizedNode = this.sanitizeTextNode(currentNode);\r\n                }\r\n            }\r\n            else if (isElement(currentNode)) {\r\n                sanitizedNode = this.sanitizeElementNode(currentNode, inertDocument);\r\n            }\r\n            else {\r\n                let message = '';\r\n                if (process.env.NODE_ENV !== 'production') {\r\n                    message = 'Node is not of type text or element';\r\n                }\r\n                throw new Error(message);\r\n            }\r\n            sanitizedParent.appendChild(sanitizedNode);\r\n            // Advance iterator while keeping track of the sanitized parent for the\r\n            // current node\r\n            currentNode = treeWalker.firstChild();\r\n            if (currentNode) {\r\n                sanitizedParent = sanitizedNode;\r\n            }\r\n            else {\r\n                while (!(currentNode = treeWalker.nextSibling())) {\r\n                    if (!(currentNode = treeWalker.parentNode())) {\r\n                        break;\r\n                    }\r\n                    sanitizedParent = sanitizedParent.parentNode;\r\n                }\r\n            }\r\n        }\r\n        return sanitizedFragment;\r\n    }\r\n    createTextNode(text) {\r\n        return document.createTextNode(text);\r\n    }\r\n    sanitizeTextNode(textNode) {\r\n        return this.createTextNode(textNode.data);\r\n    }\r\n    sanitizeElementNode(elementNode, inertDocument) {\r\n        const elementName = getNodeName(elementNode);\r\n        const newNode = inertDocument.createElement(elementName);\r\n        const dirtyAttributes = elementNode.attributes;\r\n        for (const { name, value } of dirtyAttributes) {\r\n            const policy = this.sanitizerTable.getAttributePolicy(name, elementName);\r\n            if (!this.satisfiesAllConditions(policy.conditions, dirtyAttributes)) {\r\n                this.recordChange(`Not all conditions satisfied for attribute: ${name}.`);\r\n                continue;\r\n            }\r\n            switch (policy.policyAction) {\r\n                case AttributePolicyAction.KEEP:\r\n                    setAttribute(newNode, name, value);\r\n                    break;\r\n                case AttributePolicyAction.KEEP_AND_SANITIZE_URL:\r\n                    const sanitizedAttrUrl = restrictivelySanitizeUrl(value);\r\n                    if (sanitizedAttrUrl !== value) {\r\n                        this.recordChange(`Url in attribute ${name} was modified during sanitization. Original url:\"${value}\" was sanitized to: \"${sanitizedAttrUrl}\"`);\r\n                    }\r\n                    setAttribute(newNode, name, sanitizedAttrUrl);\r\n                    break;\r\n                case AttributePolicyAction.KEEP_AND_NORMALIZE:\r\n                    // We don't consider changing the case of an attribute value to be a\r\n                    // semantic change\r\n                    setAttribute(newNode, name, value.toLowerCase());\r\n                    break;\r\n                case AttributePolicyAction.KEEP_AND_SANITIZE_STYLE:\r\n                    if (this.styleAttributeSanitizer) {\r\n                        const sanitizedCss = this.styleAttributeSanitizer(value);\r\n                        // TODO(securitymb): The sanitizer should record a change whenever\r\n                        // any meaningful change is made to the stylesheet.\r\n                        setAttribute(newNode, name, sanitizedCss);\r\n                    }\r\n                    else {\r\n                        setAttribute(newNode, name, value);\r\n                    }\r\n                    break;\r\n                case AttributePolicyAction.KEEP_AND_USE_RESOURCE_URL_POLICY:\r\n                    if (this.resourceUrlPolicy) {\r\n                        const hints = {\r\n                            type: ResourceUrlPolicyHintsType.HTML_ATTRIBUTE,\r\n                            attributeName: name,\r\n                            tagName: elementName,\r\n                        };\r\n                        const url = parseUrl(value);\r\n                        const sanitizedUrl = this.resourceUrlPolicy(url, hints);\r\n                        // TODO(securitymb): A change should be recorded if the resource url\r\n                        // changes the URL.\r\n                        if (sanitizedUrl) {\r\n                            setAttribute(newNode, name, sanitizedUrl.toString());\r\n                        }\r\n                        // If null is returned, the attribute is dropped.\r\n                    }\r\n                    else {\r\n                        // If the resource url policy is not set, we allow all resources.\r\n                        // This is how the sanitizer behaved before the resource url policy\r\n                        // was introduced.\r\n                        setAttribute(newNode, name, value);\r\n                    }\r\n                    break;\r\n                case AttributePolicyAction.KEEP_AND_USE_RESOURCE_URL_POLICY_FOR_SRCSET:\r\n                    if (this.resourceUrlPolicy) {\r\n                        const hints = {\r\n                            type: ResourceUrlPolicyHintsType.HTML_ATTRIBUTE,\r\n                            attributeName: name,\r\n                            tagName: elementName,\r\n                        };\r\n                        const srcset = parseSrcset(value);\r\n                        const sanitizedSrcset = { parts: [] };\r\n                        for (const part of srcset.parts) {\r\n                            const url = parseUrl(part.url);\r\n                            const sanitizedUrl = this.resourceUrlPolicy(url, hints);\r\n                            if (sanitizedUrl) {\r\n                                sanitizedSrcset.parts.push({\r\n                                    url: sanitizedUrl.toString(),\r\n                                    descriptor: part.descriptor,\r\n                                });\r\n                            }\r\n                        }\r\n                        setAttribute(newNode, name, serializeSrcset(sanitizedSrcset));\r\n                    }\r\n                    else {\r\n                        // If the resource url policy is not set, we allow all resources.\r\n                        // This is how the sanitizer behaved before the resource url\r\n                        // policy was introduced.\r\n                        setAttribute(newNode, name, value);\r\n                    }\r\n                    break;\r\n                case AttributePolicyAction.DROP:\r\n                    this.recordChange(`Attribute: ${name} was dropped`);\r\n                    break;\r\n                default:\r\n                    if (process.env.NODE_ENV !== 'production') {\r\n                        checkExhaustive(policy.policyAction, 'Unhandled AttributePolicyAction case');\r\n                    }\r\n            }\r\n        }\r\n        return newNode;\r\n    }\r\n    nodeFilter(node) {\r\n        if (isText(node)) {\r\n            return 1; // NodeFilter.FILTER_ACCEPT\r\n        }\r\n        else if (!isElement(node)) {\r\n            // Getting a node that is neither an `Element` or a `Text` node. This is\r\n            // likely due to something that is not supposed to be an element in user\r\n            // code but recognized as such by the TreeWalker (e.g. a polyfill for\r\n            // other kind of nodes). Since we can't recognize it as an element, we\r\n            // drop the node, but we don't record it as a meaningful change.\r\n            return 2; // NodeFilter.FILTER_REJECT\r\n        }\r\n        const nodeName = getNodeName(node);\r\n        if (nodeName === null) {\r\n            this.recordChange(`Node name was null for node: ${node}`);\r\n            return 2; // NodeFilter.FILTER_REJECT\r\n        }\r\n        if (this.sanitizerTable.isAllowedElement(nodeName)) {\r\n            return 1; // NodeFilter.FILTER_ACCEPT\r\n        }\r\n        this.recordChange(`Element: ${nodeName} was dropped`);\r\n        return 2; // NodeFilter.FILTER_REJECT\r\n    }\r\n    recordChange(errorMessage) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            this.changes.push(errorMessage);\r\n        }\r\n    }\r\n    satisfiesAllConditions(conditions, attrs) {\r\n        var _a;\r\n        if (!conditions) {\r\n            return true;\r\n        }\r\n        for (const [attrName, expectedValues] of conditions) {\r\n            const value = (_a = attrs.getNamedItem(attrName)) === null || _a === void 0 ? void 0 : _a.value;\r\n            if (value && !expectedValues.has(value)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n/** @noinline Helper to save on codesize. */\r\nfunction setAttribute(el, name, value) {\r\n    el.setAttribute(name, value);\r\n}\r\n/**\r\n * Parses a srcset attribute into a structured representation.\r\n *\r\n * @param srcset The srcset attribute value.\r\n * @return The parsed srcset.\r\n */\r\nexport function parseSrcset(srcset) {\r\n    // The algorithm is described in the spec at\r\n    // https://html.spec.whatwg.org/multipage/images.html#srcset-attributes.\r\n    //\r\n    // The code below is greatly simplified though; we don't check the validity of\r\n    // the descriptors, only extract them. If they happen to be invalid, the\r\n    // browser will ignore them anyway.\r\n    const parts = [];\r\n    for (const part of srcset.split(',')) {\r\n        const [url, descriptor] = part.trim().split(/\\s+/, 2);\r\n        parts.push({ url, descriptor });\r\n    }\r\n    return { parts };\r\n}\r\n/**\r\n * Serializes a srcset into a string.\r\n *\r\n * @param srcset The srcset to serialize.\r\n * @return The serialized srcset.\r\n */\r\nexport function serializeSrcset(srcset) {\r\n    return (srcset.parts\r\n        .map((part) => {\r\n        const { url, descriptor } = part;\r\n        return `${url}${descriptor ? ` ${descriptor}` : ''}`;\r\n    })\r\n        // We always add whitespaces around the parts to remove the ambiguity of\r\n        // whether a comma character is a part of the URL or not.\r\n        .join(' , '));\r\n}\r\nconst defaultHtmlSanitizer = /* #__PURE__ */ pure(() => new HtmlSanitizerImpl(DEFAULT_SANITIZER_TABLE, secretToken));\r\n/** Sanitizes untrusted html using the default sanitizer configuration. */\r\nexport function sanitizeHtml(html) {\r\n    return defaultHtmlSanitizer.sanitize(html);\r\n}\r\n/**\r\n * Sanitizes untrusted html using the default sanitizer configuration. Throws\r\n * an error if the html was changed.\r\n */\r\nexport function sanitizeHtmlAssertUnchanged(html) {\r\n    return defaultHtmlSanitizer.sanitizeAssertUnchanged(html);\r\n}\r\n/**\r\n * Sanitizes untrusted html using the default sanitizer configuration. Throws\r\n * an error if the html was changed.\r\n */\r\nexport function sanitizeHtmlToFragment(html) {\r\n    return defaultHtmlSanitizer.sanitizeToFragment(html);\r\n}\r\nfunction checkExhaustive(value, msg = `unexpected value ${value}!`) {\r\n    throw new Error(msg);\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport '../environment/dev.js';\r\nimport { createResourceUrlInternal, unwrapResourceUrl, } from '../internals/resource_url_impl.js';\r\nimport { unwrapScript } from '../internals/script_impl.js';\r\nimport { assertIsTemplateObject } from '../internals/string_literal.js';\r\n/**\r\n * Check whether the base url contains a valid origin,\r\n *\r\n * A string for an origin must contain only alphanumeric or any of the\r\n * following: `-.:`, and must not be an IP address. Remember that, as per the\r\n * documentation for TrustedResourceUrl, the origin must be trustworthy.\r\n *\r\n * @param base The base url that contains an origin.\r\n */\r\nfunction hasValidOrigin(base) {\r\n    if (!(/^https:\\/\\//.test(base) || /^\\/\\//.test(base))) {\r\n        return false;\r\n    }\r\n    const originStart = base.indexOf('//') + 2;\r\n    const originEnd = base.indexOf('/', originStart);\r\n    // If the base url only contains the prefix (e.g. //), or the slash\r\n    // for the origin is right after the prefix (e.g. ///), the origin is\r\n    // missing.\r\n    if (originEnd <= originStart) {\r\n        throw new Error(`Can't interpolate data in a url's origin, ` +\r\n            `Please make sure to fully specify the origin, terminated with '/'.`);\r\n    }\r\n    const origin = base.substring(originStart, originEnd);\r\n    if (!/^[0-9a-z.:-]+$/i.test(origin)) {\r\n        throw new Error('The origin contains unsupported characters.');\r\n    }\r\n    if (!/^[^:]*(:[0-9]+)?$/i.test(origin)) {\r\n        throw new Error('Invalid port number.');\r\n    }\r\n    if (!/(^|\\.)[a-z][^.]*$/i.test(origin)) {\r\n        throw new Error('The top-level domain must start with a letter.');\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Check whether the base url contains a valid about url at its beginning.\r\n *\r\n * An about url is either exactly 'about:blank' or 'about:blank#<str>' where\r\n * <str> can be an arbitrary string.\r\n *\r\n * @param base The base url.\r\n */\r\nfunction isValidAboutUrl(base) {\r\n    if (!/^about:blank/.test(base)) {\r\n        return false;\r\n    }\r\n    if (base !== 'about:blank' && !/^about:blank#/.test(base)) {\r\n        throw new Error('The about url is invalid.');\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Check whether the base url contains a valid path start at its beginning.\r\n *\r\n * A valid path start is either a '/' or a '/' followed by at least one\r\n * character that is not '/' or '\\'.\r\n *\r\n * @param base The base url.\r\n */\r\nfunction isValidPathStart(base) {\r\n    if (!/^\\//.test(base)) {\r\n        return false;\r\n    }\r\n    if (base === '/' ||\r\n        (base.length > 1 && base[1] !== '/' && base[1] !== '\\\\')) {\r\n        return true;\r\n    }\r\n    throw new Error('The path start in the url is invalid.');\r\n}\r\n/**\r\n * Check whether the base url contains a valid relative path start at its\r\n * beginning.\r\n *\r\n * A valid relative path start is a non empty string that has no ':', '/' nor\r\n * '\\', and that is followed by a '/'.\r\n *\r\n * @param base The base url.\r\n */\r\nfunction isValidRelativePathStart(base) {\r\n    // Using the RegExp syntax as the native JS RegExp syntax is not well handled\r\n    // by some downstream bundlers with this regex.\r\n    return new RegExp('^[^:\\\\s\\\\\\\\/]+/').test(base);\r\n}\r\n/**\r\n * Splits an url into segments using '?' and '#' delimiters.\r\n *\r\n * The URL can later be put back together by concatenating the returned segments\r\n * like: path + params + hash. Note that the delimiters '?' and '#' will\r\n * already be included in 'params' and 'hash' values respectively when these are\r\n * not empty.\r\n *\r\n * @param url The url to split.\r\n */\r\nfunction getUrlSegments(url) {\r\n    const segments = url.split(/\\?|#/);\r\n    const params = /\\?/.test(url) ? '?' + segments[1] : '';\r\n    const hash = /#/.test(url) ? '#' + (params ? segments[2] : segments[1]) : '';\r\n    return { path: segments[0], params, hash };\r\n}\r\n/**\r\n * Builds TrustedResourceUrl from a template literal.\r\n *\r\n * This factory is a template literal tag function. It should be called with\r\n * a template literal, with or without embedded expressions. For example,\r\n *               trustedResourceUrl`//example.com/${bar}`;\r\n * or\r\n *               trustedResourceUrl`//example.com`;\r\n *\r\n * When this function is called with a template literal without any embedded\r\n * expressions, the template string may contain anything as the whole URL is\r\n * a compile-time string constant.\r\n *\r\n * When this function is called with a template literal that contains embedded\r\n * expressions, the template must start with one of the following:\r\n * - `https://<origin>/`\r\n * - `//<origin>/`\r\n * - `/<pathStart>`\r\n * - `<relativePathStart>/`\r\n * - `about:blank`\r\n * - `data:`\r\n *\r\n * `<origin>` must contain only alphanumeric or any of the following: `-.:`.\r\n * Remember that, as per the documentation for TrustedResourceUrl, the origin\r\n * must be trustworthy. An origin of \"example.com\" could be set with this\r\n * method, but would tie the security of your site to the security of\r\n * example.com. Similarly, formats that potentially cover redirects hosted\r\n * on a trusted origin are problematic, since that could lead to untrusted\r\n * origins.\r\n *\r\n * `<pathStart>` is either an empty string, or a non empty string that does not\r\n * start with '/' or '\\'.\r\n * In other words, `/<pathStart>` is either a '/' or a\r\n * '/' followed by at least one character that is not '/' or '\\'.\r\n *\r\n * `<relativePathStart> is a non empty string that has no ':', '/' nor '\\'.\r\n *\r\n * `data:` (data URL) does not allow embedded expressions in the template\r\n * literal input.\r\n *\r\n * All embedded expressions are URL encoded when they are interpolated. Do not\r\n * embed expressions that are already URL encoded as they will be double encoded\r\n * by the builder.\r\n *\r\n * @param templateObj This contains the literal part of the template literal.\r\n * @param rest This represents the template's embedded expressions.\r\n */\r\nexport function trustedResourceUrl(templateObj, ...rest) {\r\n    // Check if templateObj is actually from a template literal.\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        assertIsTemplateObject(templateObj, rest.length);\r\n    }\r\n    if (rest.length === 0) {\r\n        return createResourceUrlInternal(templateObj[0]);\r\n    }\r\n    const base = templateObj[0].toLowerCase();\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        if (/^data:/.test(base)) {\r\n            throw new Error('Data URLs cannot have expressions in the template literal input.');\r\n        }\r\n        if (!hasValidOrigin(base) &&\r\n            !isValidPathStart(base) &&\r\n            !isValidRelativePathStart(base) &&\r\n            !isValidAboutUrl(base)) {\r\n            throw new Error('Trying to interpolate expressions in an unsupported url format.');\r\n        }\r\n    }\r\n    let url = templateObj[0];\r\n    for (let i = 0; i < rest.length; i++) {\r\n        url += encodeURIComponent(rest[i]) + templateObj[i + 1];\r\n    }\r\n    return createResourceUrlInternal(url);\r\n}\r\n/**\r\n * Creates a new TrustedResourceUrl with params added to the URL's search\r\n * parameters.\r\n *\r\n * @param params What to add to the URL. Parameters with value `null` or\r\n * `undefined` are skipped. Both keys and values will be encoded. Do not pass\r\n * pre-encoded values as this will result them being double encoded. If the\r\n * value is an array then the same parameter is added for every element in the\r\n * array.\r\n */\r\nexport function appendParams(trustedUrl, params) {\r\n    const urlSegments = getUrlSegments(unwrapResourceUrl(trustedUrl).toString());\r\n    let urlParams = urlSegments.params;\r\n    let separator = urlParams.length ? '&' : '?';\r\n    // for-of has a big polyfill.\r\n    // tslint:disable-next-line:ban-iterable-foreach\r\n    params.forEach((value, key) => {\r\n        const values = value instanceof Array ? value : [value];\r\n        for (let i = 0; i < values.length; i++) {\r\n            const v = values[i];\r\n            if (v === null || v === undefined) {\r\n                continue;\r\n            }\r\n            urlParams +=\r\n                separator +\r\n                    encodeURIComponent(key) +\r\n                    '=' +\r\n                    encodeURIComponent(String(v));\r\n            separator = '&';\r\n        }\r\n    });\r\n    return createResourceUrlInternal(urlSegments.path + urlParams + urlSegments.hash);\r\n}\r\nconst BEFORE_FRAGMENT_REGEXP = /[^#]*/;\r\n/**\r\n * Creates a new TrustedResourceUrl based on an existing one but with the\r\n * addition of a fragment (the part after `#`). If the URL already has a\r\n * fragment, it is replaced with the new one.\r\n * @param fragment The fragment to add to the URL, verbatim, without the leading\r\n * `#`. No additional escaping is applied.\r\n */\r\nexport function replaceFragment(trustedUrl, fragment) {\r\n    const urlString = unwrapResourceUrl(trustedUrl).toString();\r\n    return createResourceUrlInternal(BEFORE_FRAGMENT_REGEXP.exec(urlString)[0] + '#' + fragment);\r\n}\r\n/**\r\n * Creates a new TrustedResourceUrl based on an existing one with a single\r\n * subpath segment added to the end of the existing path and prior to any query\r\n * parameters and/or fragments that already exist in the URL.\r\n * @param pathSegment The singular sub path being added to the URL. Do not pass\r\n *     a pre-encoded value as this will result in it being double encoded.\r\n */\r\nexport function appendPathSegment(trustedUrl, pathSegment) {\r\n    const urlSegments = getUrlSegments(unwrapResourceUrl(trustedUrl).toString());\r\n    const separator = urlSegments.path.slice(-1) === '/' ? '' : '/';\r\n    const newPath = urlSegments.path + separator + encodeURIComponent(pathSegment);\r\n    return createResourceUrlInternal(newPath + urlSegments.params + urlSegments.hash);\r\n}\r\n/**\r\n * Creates a `TrustedResourceUrl` by generating a `Blob` from a\r\n * `SafeScript` and then calling `URL.createObjectURL` with that `Blob`.\r\n *\r\n * Caller must call `URL.revokeObjectURL()` on the stringified url to\r\n * release the underlying `Blob`.\r\n */\r\nexport function objectUrlFromScript(safeScript) {\r\n    const scriptContent = unwrapScript(safeScript).toString();\r\n    const blob = new Blob([scriptContent], { type: 'text/javascript' });\r\n    return createResourceUrlInternal(URL.createObjectURL(blob));\r\n}\r\n/**\r\n * A function to safely retrieve the base URI from the Window object and set it\r\n * at the beginning of a given path-relative (starts with \"/\") resource url.\r\n *\r\n * @param pathRelativeUrl The resource to which the origin shall be prepended.\r\n */\r\nexport function toAbsoluteResourceUrl(pathRelativeUrl) {\r\n    const originalUrl = unwrapResourceUrl(pathRelativeUrl).toString();\r\n    const qualifiedUrl = new URL(originalUrl, window.document.baseURI);\r\n    return createResourceUrlInternal(qualifiedUrl.toString());\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport '../environment/dev.js';\r\nimport { ensureTokenIsValid, secretToken } from './secrets.js';\r\n/**\r\n * A complete CSS style sheet, safe to use in style contexts in an HTML document\r\n * or DOM APIs.\r\n */\r\nexport class SafeStyleSheet {\r\n}\r\n/** Implementation for `SafeStyleSheet` */\r\nclass StyleSheetImpl extends SafeStyleSheet {\r\n    constructor(styleSheet, token) {\r\n        super();\r\n        ensureTokenIsValid(token);\r\n        this.privateDoNotAccessOrElseWrappedStyleSheet = styleSheet;\r\n    }\r\n    toString() {\r\n        return this.privateDoNotAccessOrElseWrappedStyleSheet;\r\n    }\r\n}\r\n/**\r\n * Builds a new `SafeStyleSheet` from the given string, without enforcing\r\n * safety guarantees. This shouldn't be exposed to application developers, and\r\n * must only be used as a step towards safe builders or safe constants.\r\n */\r\nexport function createStyleSheetInternal(styleSheet) {\r\n    return new StyleSheetImpl(styleSheet, secretToken);\r\n}\r\n/**\r\n * Checks if the given value is a `SafeStyleSheet` instance.\r\n */\r\nexport function isStyleSheet(value) {\r\n    return value instanceof StyleSheetImpl;\r\n}\r\n/**\r\n * Returns the string value of the passed `SafeStyleSheet` object while\r\n * ensuring it has the correct type.\r\n */\r\nexport function unwrapStyleSheet(value) {\r\n    if (value instanceof StyleSheetImpl) {\r\n        return value.privateDoNotAccessOrElseWrappedStyleSheet;\r\n    }\r\n    else {\r\n        let message = '';\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            message = 'Unexpected type when unwrapping SafeStyleSheet';\r\n        }\r\n        throw new Error(message);\r\n    }\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport { unwrapUrlOrSanitize } from '../../builders/url_builders.js';\r\n/**\r\n * Sets the Href attribute from the given Url.\r\n */\r\nexport function setHref(anchor, url) {\r\n    const sanitizedUrl = unwrapUrlOrSanitize(url);\r\n    if (sanitizedUrl !== undefined) {\r\n        anchor.href = sanitizedUrl;\r\n    }\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport { unwrapUrlOrSanitize } from '../../builders/url_builders.js';\r\n/**\r\n * Sets the Href attribute from the given Url.\r\n */\r\nexport function setHref(area, url) {\r\n    const sanitizedUrl = unwrapUrlOrSanitize(url);\r\n    if (sanitizedUrl !== undefined) {\r\n        area.href = sanitizedUrl;\r\n    }\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport { unwrapResourceUrl, } from '../../internals/resource_url_impl.js';\r\n/**\r\n * Sets the Href attribute from the given TrustedResourceUrl.\r\n */\r\nexport function setHref(baseEl, url) {\r\n    baseEl.href = unwrapResourceUrl(url);\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport { unwrapUrlOrSanitize } from '../../builders/url_builders.js';\r\n/**\r\n * Sets the Formaction attribute from the given Url.\r\n */\r\nexport function setFormaction(button, url) {\r\n    const sanitizedUrl = unwrapUrlOrSanitize(url);\r\n    if (sanitizedUrl !== undefined) {\r\n        button.formAction = sanitizedUrl;\r\n    }\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @fileoverview This contains safe wrappers for properties that aren't specific\r\n * to one kind of HTMLElement (like innerHTML), plus other setters and functions\r\n * that are not tied to elements (like location.href or Worker constructor).\r\n */\r\nimport '../../environment/dev.js';\r\nimport { unwrapAttributePrefix, } from '../../internals/attribute_impl.js';\r\nimport { unwrapHtml } from '../../internals/html_impl.js';\r\n/**\r\n * Safely set {@link Element.innerHTML} on a given ShadowRoot or Element which\r\n * may not be a `<script>` element or a `<style>` element.\r\n */\r\nexport function setInnerHtml(elOrRoot, v) {\r\n    if (isElement(elOrRoot)) {\r\n        throwIfScriptOrStyle(elOrRoot);\r\n    }\r\n    elOrRoot.innerHTML = unwrapHtml(v);\r\n}\r\n/**\r\n * Safely set {@link Element.outerHTML} for the given Element.\r\n */\r\nexport function setOuterHtml(e, v) {\r\n    const parent = e.parentElement;\r\n    if (parent !== null) {\r\n        throwIfScriptOrStyle(parent);\r\n    }\r\n    e.outerHTML = unwrapHtml(v);\r\n}\r\n/**\r\n * Safely call {@link Element.insertAdjacentHTML} for the given Element.\r\n */\r\nexport function insertAdjacentHtml(element, position, v) {\r\n    const tagContext = position === 'beforebegin' || position === 'afterend'\r\n        ? element.parentElement\r\n        : element;\r\n    if (tagContext !== null) {\r\n        throwIfScriptOrStyle(tagContext);\r\n    }\r\n    element.insertAdjacentHTML(position, unwrapHtml(v));\r\n}\r\n/**\r\n * Given a set of known-to-be-safe prefixes (e.g., \"data-\", \"aria-\", \"js\"),\r\n * return a setter function that allows you to set attributes on an element,\r\n * as long as the names of the attributes to be set has one of the prefixes.\r\n *\r\n * The returned setter ensures that setting any dangerous attribute, e.g.,\r\n * \"src\", \"href\" will cause an exception. This is intended to be used as the\r\n * safe alterantive of `Element#setAttribute`, when applications need to set\r\n * attributes that do not have security implications and do not have a\r\n * corresponding DOM property.\r\n */\r\nexport function buildPrefixedAttributeSetter(prefix, ...otherPrefixes) {\r\n    const prefixes = [prefix, ...otherPrefixes];\r\n    return (e, attr, value) => {\r\n        setPrefixedAttribute(prefixes, e, attr, value);\r\n    };\r\n}\r\n/**\r\n * The safe alternative to Element#setAttribute. The function takes a list of\r\n * `SafeAttributePrefix`, making developer intention explicit. The attribute\r\n * to be set must has one of the safe prefixes, otherwise the function throws\r\n * an Error.\r\n */\r\nexport function setPrefixedAttribute(attrPrefixes, e, attr, value) {\r\n    if (attrPrefixes.length === 0) {\r\n        let message = '';\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            message = 'No prefixes are provided';\r\n        }\r\n        throw new Error(message);\r\n    }\r\n    const prefixes = attrPrefixes.map((s) => unwrapAttributePrefix(s));\r\n    const attrLower = attr.toLowerCase();\r\n    if (prefixes.every((p) => attrLower.indexOf(p) !== 0)) {\r\n        throw new Error(`Attribute \"${attr}\" does not match any of the allowed prefixes.`);\r\n    }\r\n    e.setAttribute(attr, value);\r\n}\r\nfunction throwIfScriptOrStyle(element) {\r\n    let message = '';\r\n    const tagName = element.tagName;\r\n    if (tagName === 'SCRIPT' || tagName === 'STYLE') {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (tagName === 'SCRIPT') {\r\n                message = 'Use safeScriptEl.setTextContent with a SafeScript.';\r\n            }\r\n            else {\r\n                message = 'Use safeStyleEl.setTextContent with a SafeStyleSheet.';\r\n            }\r\n        }\r\n        throw new Error(message);\r\n    }\r\n}\r\nfunction isElement(elOrRoot) {\r\n    return elOrRoot.nodeType === 1; // Node.ELEMENT_NODE\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport { unwrapResourceUrl, } from '../../internals/resource_url_impl.js';\r\n/**\r\n * Sets the Src attribute from the given SafeUrl.\r\n */\r\nexport function setSrc(embedEl, url) {\r\n    embedEl.src = unwrapResourceUrl(url);\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport { unwrapUrlOrSanitize } from '../../builders/url_builders.js';\r\n/**\r\n * Sets the Action attribute from the given Url.\r\n */\r\nexport function setAction(form, url) {\r\n    const sanitizedUrl = unwrapUrlOrSanitize(url);\r\n    if (sanitizedUrl !== undefined) {\r\n        form.action = sanitizedUrl;\r\n    }\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @fileoverview Safe iframe helpers and go/intents-for-iframes-for-closure\r\n */\r\nimport { unwrapHtml } from '../../internals/html_impl.js';\r\nimport { unwrapResourceUrl, } from '../../internals/resource_url_impl.js';\r\n/** Sets the Src attribute using a TrustedResourceUrl */\r\nexport function setSrc(iframe, v) {\r\n    iframe.src = unwrapResourceUrl(v).toString();\r\n}\r\n/** Sets the Srcdoc attribute using a SafeHtml */\r\nexport function setSrcdoc(iframe, v) {\r\n    iframe.srcdoc = unwrapHtml(v);\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport { unwrapUrlOrSanitize } from '../../builders/url_builders.js';\r\n/**\r\n * Sets the Formaction attribute from the given Url.\r\n */\r\nexport function setFormaction(input, url) {\r\n    const sanitizedUrl = unwrapUrlOrSanitize(url);\r\n    if (sanitizedUrl !== undefined) {\r\n        input.formAction = sanitizedUrl;\r\n    }\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport { unwrapUrlOrSanitize } from '../../builders/url_builders.js';\r\nimport { isResourceUrl, unwrapResourceUrl, } from '../../internals/resource_url_impl.js';\r\nconst SAFE_URL_REL_VALUES = [\r\n    'alternate',\r\n    'author',\r\n    'bookmark',\r\n    'canonical',\r\n    'cite',\r\n    'help',\r\n    'icon',\r\n    'license',\r\n    'modulepreload',\r\n    'next',\r\n    'prefetch',\r\n    'dns-prefetch',\r\n    'prerender',\r\n    'preconnect',\r\n    'preload',\r\n    'prev',\r\n    'search',\r\n    'subresource',\r\n];\r\nexport function setHrefAndRel(link, url, rel) {\r\n    if (isResourceUrl(url)) {\r\n        setHrefAndRelWithTrustedResourceUrl(link, url, rel);\r\n        return;\r\n    }\r\n    else {\r\n        if (SAFE_URL_REL_VALUES.indexOf(rel) === -1) {\r\n            throw new Error(`TrustedResourceUrl href attribute required with rel=\"${rel}\"`);\r\n        }\r\n        const sanitizedUrl = unwrapUrlOrSanitize(url);\r\n        if (sanitizedUrl === undefined) {\r\n            return;\r\n        }\r\n        link.href = sanitizedUrl;\r\n    }\r\n    link.rel = rel;\r\n}\r\n/**\r\n * Safely sets a link element's \"href\" property using a TrustedResourceUrl and\r\n * an arbitrary \"rel\" value. It is recommended to use this method when the url\r\n * is always a TrustedResourceUrl, since the resulting binary size will be\r\n * smaller.\r\n */\r\nexport function setHrefAndRelWithTrustedResourceUrl(link, url, rel) {\r\n    link.href = unwrapResourceUrl(url).toString();\r\n    link.rel = rel;\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport { unwrapResourceUrl, } from '../../internals/resource_url_impl.js';\r\n/** Sets the data attribute using a TrustedResourceUrl */\r\nexport function setData(obj, v) {\r\n    obj.data = unwrapResourceUrl(v);\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport { unwrapResourceUrl, } from '../../internals/resource_url_impl.js';\r\nimport { unwrapScript } from '../../internals/script_impl.js';\r\nimport { getScriptNonce } from '../globals/window.js';\r\n/** Propagates CSP nonce to dynamically created scripts. */\r\nfunction setNonceForScriptElement(script) {\r\n    const win = script.ownerDocument && script.ownerDocument.defaultView;\r\n    const nonce = getScriptNonce(win || window);\r\n    if (nonce) {\r\n        script.setAttribute('nonce', nonce);\r\n    }\r\n}\r\n/** Sets textContent from the given SafeScript. */\r\nexport function setTextContent(script, v, options) {\r\n    script.textContent = unwrapScript(v);\r\n    if (options === null || options === void 0 ? void 0 : options.omitNonce)\r\n        return;\r\n    setNonceForScriptElement(script);\r\n}\r\n/** Sets the Src attribute using a TrustedResourceUrl */\r\nexport function setSrc(script, v, options) {\r\n    script.src = unwrapResourceUrl(v);\r\n    if (options === null || options === void 0 ? void 0 : options.omitNonce)\r\n        return;\r\n    setNonceForScriptElement(script);\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport { unwrapUrlOrSanitize } from '../../builders/url_builders.js';\r\n/**\r\n * open calls {@link Window.open} on the given {@link Window}, given a\r\n * target {@link Url}.\r\n */\r\nexport function open(win, url, target, features) {\r\n    const sanitizedUrl = unwrapUrlOrSanitize(url);\r\n    if (sanitizedUrl !== undefined) {\r\n        return win.open(sanitizedUrl, target, features);\r\n    }\r\n    return null;\r\n}\r\n/** Returns CSP nonce, if set for any script tag. */\r\nexport function getScriptNonce(win) {\r\n    return getNonceFor('script', win);\r\n}\r\n/** Returns CSP nonce, if set for any style tag. */\r\nexport function getStyleNonce(win) {\r\n    return getNonceFor('style', win);\r\n}\r\nfunction getNonceFor(elementName, win) {\r\n    var _a;\r\n    const doc = win.document;\r\n    // document.querySelector can be undefined in non-browser environments.\r\n    const el = (_a = doc.querySelector) === null || _a === void 0 ? void 0 : _a.call(doc, `${elementName}[nonce]`);\r\n    if (el) {\r\n        // Try to get the nonce from the IDL property first, because browsers that\r\n        // implement additional nonce protection features (currently only Chrome) to\r\n        // prevent nonce stealing via CSS do not expose the nonce via attributes.\r\n        // See https://github.com/whatwg/html/issues/2369\r\n        return el['nonce'] || el.getAttribute('nonce') || '';\r\n    }\r\n    return '';\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport { unwrapStyleSheet, } from '../../internals/style_sheet_impl.js';\r\n/** Safe setters for `HTMLStyleElement`s. */\r\nexport function setTextContent(elem, safeStyleSheet) {\r\n    elem.textContent = unwrapStyleSheet(safeStyleSheet);\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport '../../environment/dev.js';\r\nconst UNSAFE_SVG_ATTRIBUTES = ['href', 'xlink:href'];\r\n/**\r\n * Set attribute on SVGElement if the attribute doesn't have security\r\n * implications. If the attribute can potentially cause XSS, throw an error.\r\n */\r\nexport function setAttribute(svg, attr, value) {\r\n    const attrLower = attr.toLowerCase();\r\n    if (UNSAFE_SVG_ATTRIBUTES.indexOf(attrLower) !== -1 ||\r\n        attrLower.indexOf('on') === 0) {\r\n        let msg = '';\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            msg = `Setting the '${attrLower}' attribute on SVG can cause XSS.`;\r\n        }\r\n        throw new Error(msg);\r\n    }\r\n    svg.setAttribute(attr, value);\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport { extractScheme } from '../../builders/url_builders.js';\r\nimport '../../environment/dev.js';\r\n/**\r\n * Sets the Href attribute from the given URL.\r\n * javascript: and data: URL are blocked as they can lead to XSS and the <use>\r\n * element only loads resources same-origin.\r\n */\r\nexport function setHref(useEl, url) {\r\n    const scheme = extractScheme(url);\r\n    if (scheme === 'javascript:' || scheme === 'data:') {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            const msg = `A URL with content '${url}' was sanitized away.`;\r\n            console.error(msg);\r\n        }\r\n        return;\r\n    }\r\n    // Note that the href property is read-only, so setAttribute must be used.\r\n    useEl.setAttribute('href', url);\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport { unwrapHtml } from '../../internals/html_impl.js';\r\n/**\r\n * write safely calls {@link Document.write} on the given {@link Document} with\r\n * the given {@link SafeHtml}.\r\n */\r\nexport function write(doc, text) {\r\n    doc.write(unwrapHtml(text));\r\n}\r\n/**\r\n * Safely calls {@link Document.execCommand}. When command is insertHtml, a\r\n * SafeHtml must be passed in as value.\r\n */\r\nexport function execCommand(doc, command, value) {\r\n    const commandString = String(command);\r\n    let valueArgument = value;\r\n    if (commandString.toLowerCase() === 'inserthtml') {\r\n        valueArgument = unwrapHtml(value);\r\n    }\r\n    return doc.execCommand(commandString, /* showUi= */ false, valueArgument);\r\n}\r\n/**\r\n * Safely calls {@link Document.execCommand}('insertHtml').\r\n * @deprecated Use safeDocument.execCommand.\r\n */\r\nexport function execCommandInsertHtml(doc, html) {\r\n    return doc.execCommand('insertHTML', \r\n    /* showUi= */ false, unwrapHtml(html));\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport '../../environment/dev.js';\r\nimport { createHtmlInternal, unwrapHtml, } from '../../internals/html_impl.js';\r\n/** Safely parses a string using the HTML parser. */\r\nexport function parseHtml(parser, html) {\r\n    return parseFromString(parser, html, 'text/html');\r\n}\r\n/**\r\n * Safely parses a string using the XML parser. If the XML document is found to\r\n * contain any elements from the HTML or SVG namespaces, an error is thrown for\r\n * security reasons.\r\n */\r\nexport function parseXml(parser, xml) {\r\n    const doc = parseFromString(parser, createHtmlInternal(xml), 'text/xml');\r\n    const iterator = document.createNodeIterator(doc, NodeFilter.SHOW_ALL);\r\n    let currentNode;\r\n    while ((currentNode = iterator.nextNode())) {\r\n        if (currentNode instanceof HTMLElement ||\r\n            currentNode instanceof SVGElement) {\r\n            let message = 'unsafe XML';\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                message = `attempted to parse an XML document that embeds HTML or SVG content`;\r\n            }\r\n            throw new Error(message);\r\n        }\r\n    }\r\n    return doc;\r\n}\r\n/** Safely parses a string using the HTML or XML parser. */\r\nexport function parseFromString(parser, content, contentType) {\r\n    return parser.parseFromString(unwrapHtml(content), contentType);\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport { unwrapScript } from '../../internals/script_impl.js';\r\nexport { fetchResourceUrl } from './fetch.js';\r\n/**\r\n * Evaluates a SafeScript value in the given scope using eval.\r\n *\r\n * Strongly consider avoiding this, as eval blocks CSP adoption and does not\r\n * benefit from compiler optimizations.\r\n */\r\nexport function globalEval(win, script) {\r\n    const trustedScript = unwrapScript(script);\r\n    let result = win.eval(trustedScript);\r\n    if (result === trustedScript) {\r\n        // https://crbug.com/1024786 manifesting in workers.\r\n        result = win.eval(trustedScript.toString());\r\n    }\r\n    return result;\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n/**\r\n * @fileoverview\r\n * Functions which allow fetch() on resourceUrls to be\r\n * interpreted as SafeHtml or SafeScript.\r\n */\r\nimport { createHtmlInternal } from '../../internals/html_impl.js';\r\nimport { unwrapResourceUrl, } from '../../internals/resource_url_impl.js';\r\nimport { createScriptInternal } from '../../internals/script_impl.js';\r\nimport { createStyleSheetInternal, } from '../../internals/style_sheet_impl.js';\r\n/**\r\n * IncorrectTypeError represents an error that can occur with {@link\r\n * fetchResourceUrl} when the server responds with a content type that would be\r\n * unsafe for the type of content requested.\r\n */\r\nexport class IncorrectContentTypeError extends Error {\r\n    constructor(url, typeName, contentType) {\r\n        super(`${url} was requested as a ${typeName}, but the response Content-Type, \"${contentType} is not appropriate for this type of content.`);\r\n        this.url = url;\r\n        this.typeName = typeName;\r\n        this.contentType = contentType;\r\n    }\r\n}\r\n/**\r\n * This causes the compiler to better optimize `createHtmlInternal` calls, where\r\n * previously it was building and including the whole module without\r\n * tree-shaking.\r\n *\r\n * TODO(b/254093954) find out why this is and remove this workaround.\r\n */\r\nfunction privatecreateHtmlInternal(html) {\r\n    return createHtmlInternal(html);\r\n}\r\n/**\r\n * fetches a given {@link TrustedResourceUrl},\r\n * and returns a value which can be turned into a given safe type.\r\n */\r\nexport function fetchResourceUrl(u, init) {\r\n    var _a, _b, _c;\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const response = yield fetch(unwrapResourceUrl(u).toString(), init);\r\n        /**\r\n         * the content type type of the response, excluding any MIME params\r\n         */\r\n        const mimeType = (_c = (_b = (_a = response.headers\r\n            .get('Content-Type')) === null || _a === void 0 ? void 0 : _a.split(';', 2)) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.toLowerCase();\r\n        return {\r\n            html() {\r\n                return __awaiter(this, void 0, void 0, function* () {\r\n                    if (mimeType !== 'text/html') {\r\n                        throw new IncorrectContentTypeError(response.url, 'SafeHtml', 'text/html');\r\n                    }\r\n                    const text = yield response.text();\r\n                    return privatecreateHtmlInternal(text);\r\n                });\r\n            },\r\n            script() {\r\n                return __awaiter(this, void 0, void 0, function* () {\r\n                    // see:\r\n                    // https://html.spec.whatwg.org/multipage/scripting.html#scriptingLanguages\r\n                    if (mimeType !== 'text/javascript' &&\r\n                        mimeType !== 'application/javascript') {\r\n                        throw new IncorrectContentTypeError(response.url, 'SafeScript', 'text/javascript');\r\n                    }\r\n                    const text = yield response.text();\r\n                    return createScriptInternal(text);\r\n                });\r\n            },\r\n            styleSheet() {\r\n                return __awaiter(this, void 0, void 0, function* () {\r\n                    if (mimeType !== 'text/css') {\r\n                        throw new IncorrectContentTypeError(response.url, 'SafeStyleSheet', 'text/css');\r\n                    }\r\n                    const text = yield response.text();\r\n                    return createStyleSheetInternal(text);\r\n                });\r\n            },\r\n        };\r\n    });\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport { unwrapUrlOrSanitize } from '../../builders/url_builders.js';\r\n/**\r\n * setHref safely sets {@link Location.href} on the given {@link Location} with\r\n * given {@link Url}.\r\n */\r\nexport function setHref(loc, url) {\r\n    const sanitizedUrl = unwrapUrlOrSanitize(url);\r\n    if (sanitizedUrl !== undefined) {\r\n        loc.href = sanitizedUrl;\r\n    }\r\n}\r\n/**\r\n * replace safely calls {@link Location.replace} on the given {@link Location}\r\n * with given {@link Url}.\r\n */\r\nexport function replace(loc, url) {\r\n    const sanitizedUrl = unwrapUrlOrSanitize(url);\r\n    if (sanitizedUrl !== undefined) {\r\n        loc.replace(sanitizedUrl);\r\n    }\r\n}\r\n/**\r\n * assign safely calls {@link Location.assign} on the given {@link Location}\r\n * with given {@link Url}.\r\n */\r\nexport function assign(loc, url) {\r\n    const sanitizedUrl = unwrapUrlOrSanitize(url);\r\n    if (sanitizedUrl !== undefined) {\r\n        loc.assign(sanitizedUrl);\r\n    }\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport { unwrapResourceUrl, } from '../../internals/resource_url_impl.js';\r\n/** Safely registers a service worker by URL */\r\nexport function register(container, scriptURL, options) {\r\n    return container.register(unwrapResourceUrl(scriptURL), options);\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * A pattern that matches safe MIME types. Only matches image, video and audio\r\n * types, with some parameter support (most notably, we haven't implemented the\r\n * more complex parts like %-encoded characters or non-alphanumerical ones for\r\n * simplicity's sake). Also, the specs are fairly complex, and they don't\r\n * necessarily agree with Chrome on some aspects, and so we settled on a subset\r\n * where the behavior makes sense to all parties involved.\r\n *\r\n * The spec is available at https://mimesniff.spec.whatwg.org/ (and see\r\n * https://tools.ietf.org/html/rfc2397 for data: urls, which override some of\r\n * it).\r\n */\r\nfunction isSafeMimeType(mimeType) {\r\n    const match = mimeType.match(/^([^;]+)(?:;\\w+=(?:\\w+|\"[\\w;,= ]+\"))*$/i);\r\n    return ((match === null || match === void 0 ? void 0 : match.length) === 2 &&\r\n        (isSafeImageMimeType(match[1]) ||\r\n            isSafeVideoMimeType(match[1]) ||\r\n            isSafeAudioMimeType(match[1])));\r\n}\r\nfunction isSafeImageMimeType(mimeType) {\r\n    return /^image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon|heic|heif)$/i.test(mimeType);\r\n}\r\nfunction isSafeVideoMimeType(mimeType) {\r\n    return /^video\\/(?:mpeg|mp4|ogg|webm|x-matroska|quicktime|x-ms-wmv)$/i.test(mimeType);\r\n}\r\nfunction isSafeAudioMimeType(mimeType) {\r\n    return /^audio\\/(?:3gpp2|3gpp|aac|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-matroska|x-wav|wav|webm)$/i.test(mimeType);\r\n}\r\n/**\r\n * Wraps URL.createObjectURL, checking the safety of the source. For blobs, the\r\n * function validates that the Blob's type is amongst the safe MIME types, and\r\n * throws if that's not the case. URL.revokeObjectURL should be called on the\r\n * returned URL to free the resources.\r\n */\r\nexport function objectUrlFromSafeSource(source) {\r\n    // MediaSource support in Safari is limited\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaSource#browser_compatibility\r\n    if (typeof MediaSource !== 'undefined' && source instanceof MediaSource) {\r\n        return URL.createObjectURL(source);\r\n    }\r\n    const blob = source;\r\n    if (!isSafeMimeType(blob.type)) {\r\n        let message = '';\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            message = `unsafe blob MIME type: ${blob.type}`;\r\n        }\r\n        throw new Error(message);\r\n    }\r\n    return URL.createObjectURL(blob);\r\n}\r\n", "/**\r\n * @license\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport { unwrapResourceUrl, } from '../../internals/resource_url_impl.js';\r\n/**\r\n * Safely creates a Web Worker.\r\n *\r\n * Example usage:\r\n *   const trustedResourceUrl = trustedResourceUrl`/safe_script.js`;\r\n *   safedom.safeWorker.create(trustedResourceUrl);\r\n * which is a safe alternative to\r\n *   new Worker(url);\r\n * The latter can result in loading untrusted code.\r\n */\r\nexport function create(url, options) {\r\n    return new Worker(unwrapResourceUrl(url), options);\r\n}\r\n/** Safely creates a shared Web Worker. */\r\nexport function createShared(url, options) {\r\n    return new SharedWorker(unwrapResourceUrl(url), options);\r\n}\r\n/** Safely calls importScripts */\r\nexport function importScripts(scope, ...urls) {\r\n    scope.importScripts(...urls.map((url) => unwrapResourceUrl(url)));\r\n}\r\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Type constant for Firebase Analytics.\n */\nexport const ANALYTICS_TYPE = 'analytics';\n\n// Key to attach FID to in gtag params.\nexport const GA_FID_KEY = 'firebase_id';\nexport const ORIGIN_KEY = 'origin';\n\nexport const FETCH_TIMEOUT_MILLIS = 60 * 1000;\n\nexport const DYNAMIC_CONFIG_URL =\n  'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';\n\nexport const GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\n\nexport const enum GtagCommand {\n  EVENT = 'event',\n  SET = 'set',\n  CONFIG = 'config',\n  CONSENT = 'consent',\n  GET = 'get'\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/analytics');\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CustomParams,\n  ControlParams,\n  EventParams,\n  ConsentSettings\n} from './public-types';\nimport { DynamicConfig, DataLayer, Gtag, MinimalDynamicConfig } from './types';\nimport { GtagCommand, GTAG_URL } from './constants';\nimport { logger } from './logger';\nimport { trustedResourceUrl } from 'safevalues';\nimport { safeScriptEl } from 'safevalues/dom';\n\n// Possible parameter types for gtag 'event' and 'config' commands\ntype GtagConfigOrEventParams = ControlParams & EventParams & CustomParams;\n\n/**\n * Makeshift polyfill for Promise.allSettled(). Resolves when all promises\n * have either resolved or rejected.\n *\n * @param promises Array of promises to wait for.\n */\nexport function promiseAllSettled<T>(\n  promises: Array<Promise<T>>\n): Promise<T[]> {\n  return Promise.all(promises.map(promise => promise.catch(e => e)));\n}\n\n/**\n * Inserts gtag script tag into the page to asynchronously download gtag.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nexport function insertScriptTag(\n  dataLayerName: string,\n  measurementId: string\n): void {\n  const script = document.createElement('script');\n\n  // We are not providing an analyticsId in the URL because it would trigger a `page_view`\n  // without fid. We will initialize ga-id using gtag (config) command together with fid.\n  //\n  // We also have to ensure the template string before the first expression constitutes a valid URL\n  // start, as this is what the initial validation focuses on. If the template literal begins\n  // directly with an expression (e.g. `${GTAG_SCRIPT_URL}`), the validation fails due to an\n  // empty initial string.\n  const url = trustedResourceUrl`https://www.googletagmanager.com/gtag/js?l=${dataLayerName}&id=${measurementId}`;\n  safeScriptEl.setSrc(script, url);\n\n  script.async = true;\n  document.head.appendChild(script);\n}\n\n/**\n * Get reference to, or create, global datalayer.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nexport function getOrCreateDataLayer(dataLayerName: string): DataLayer {\n  // Check for existing dataLayer and create if needed.\n  let dataLayer: DataLayer = [];\n  if (Array.isArray(window[dataLayerName])) {\n    dataLayer = window[dataLayerName] as DataLayer;\n  } else {\n    window[dataLayerName] = dataLayer;\n  }\n  return dataLayer;\n}\n\n/**\n * Wrapped gtag logic when gtag is called with 'config' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param measurementId GA Measurement ID to set config for.\n * @param gtagParams Gtag config params to set.\n */\nasync function gtagOnConfig(\n  gtagCore: Gtag,\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [measurementId: string]: string },\n  measurementId: string,\n  gtagParams?: ControlParams & EventParams & CustomParams\n): Promise<void> {\n  // If config is already fetched, we know the appId and can use it to look up what FID promise we\n  /// are waiting for, and wait only on that one.\n  const correspondingAppId = measurementIdToAppId[measurementId as string];\n  try {\n    if (correspondingAppId) {\n      await initializationPromisesMap[correspondingAppId];\n    } else {\n      // If config is not fetched yet, wait for all configs (we don't know which one we need) and\n      // find the appId (if any) corresponding to this measurementId. If there is one, wait on\n      // that appId's initialization promise. If there is none, promise resolves and gtag\n      // call goes through.\n      const dynamicConfigResults = await promiseAllSettled(\n        dynamicConfigPromisesList\n      );\n      const foundConfig = dynamicConfigResults.find(\n        config => config.measurementId === measurementId\n      );\n      if (foundConfig) {\n        await initializationPromisesMap[foundConfig.appId];\n      }\n    }\n  } catch (e) {\n    logger.error(e);\n  }\n  gtagCore(GtagCommand.CONFIG, measurementId, gtagParams);\n}\n\n/**\n * Wrapped gtag logic when gtag is called with 'event' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementId GA Measurement ID to log event to.\n * @param gtagParams Params to log with this event.\n */\nasync function gtagOnEvent(\n  gtagCore: Gtag,\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementId: string,\n  gtagParams?: ControlParams & EventParams & CustomParams\n): Promise<void> {\n  try {\n    let initializationPromisesToWaitFor: Array<Promise<string>> = [];\n\n    // If there's a 'send_to' param, check if any ID specified matches\n    // an initializeIds() promise we are waiting for.\n    if (gtagParams && gtagParams['send_to']) {\n      let gaSendToList: string | string[] = gtagParams['send_to'];\n      // Make it an array if is isn't, so it can be dealt with the same way.\n      if (!Array.isArray(gaSendToList)) {\n        gaSendToList = [gaSendToList];\n      }\n      // Checking 'send_to' fields requires having all measurement ID results back from\n      // the dynamic config fetch.\n      const dynamicConfigResults = await promiseAllSettled(\n        dynamicConfigPromisesList\n      );\n      for (const sendToId of gaSendToList) {\n        // Any fetched dynamic measurement ID that matches this 'send_to' ID\n        const foundConfig = dynamicConfigResults.find(\n          config => config.measurementId === sendToId\n        );\n        const initializationPromise =\n          foundConfig && initializationPromisesMap[foundConfig.appId];\n        if (initializationPromise) {\n          initializationPromisesToWaitFor.push(initializationPromise);\n        } else {\n          // Found an item in 'send_to' that is not associated\n          // directly with an FID, possibly a group.  Empty this array,\n          // exit the loop early, and let it get populated below.\n          initializationPromisesToWaitFor = [];\n          break;\n        }\n      }\n    }\n\n    // This will be unpopulated if there was no 'send_to' field , or\n    // if not all entries in the 'send_to' field could be mapped to\n    // a FID. In these cases, wait on all pending initialization promises.\n    if (initializationPromisesToWaitFor.length === 0) {\n      initializationPromisesToWaitFor = Object.values(\n        initializationPromisesMap\n      );\n    }\n\n    // Run core gtag function with args after all relevant initialization\n    // promises have been resolved.\n    await Promise.all(initializationPromisesToWaitFor);\n    // Workaround for http://b/141370449 - third argument cannot be undefined.\n    gtagCore(GtagCommand.EVENT, measurementId, gtagParams || {});\n  } catch (e) {\n    logger.error(e);\n  }\n}\n\n/**\n * Wraps a standard gtag function with extra code to wait for completion of\n * relevant initialization promises before sending requests.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n */\nfunction wrapGtag(\n  gtagCore: Gtag,\n  /**\n   * Allows wrapped gtag calls to wait on whichever intialization promises are required,\n   * depending on the contents of the gtag params' `send_to` field, if any.\n   */\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  /**\n   * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\n   * before determining what initialization promises (which include FIDs) to wait for.\n   */\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  /**\n   * Wrapped gtag config calls can narrow down which initialization promise (with FID)\n   * to wait for if the measurementId is already fetched, by getting the corresponding appId,\n   * which is the key for the initialization promises map.\n   */\n  measurementIdToAppId: { [measurementId: string]: string }\n): Gtag {\n  /**\n   * Wrapper around gtag that ensures FID is sent with gtag calls.\n   * @param command Gtag command type.\n   * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\n   * @param gtagParams Params if event is EVENT/CONFIG.\n   */\n  async function gtagWrapper(\n    command: 'config' | 'set' | 'event' | 'consent' | 'get' | string,\n    ...args: unknown[]\n  ): Promise<void> {\n    try {\n      // If event, check that relevant initialization promises have completed.\n      if (command === GtagCommand.EVENT) {\n        const [measurementId, gtagParams] = args;\n        // If EVENT, second arg must be measurementId.\n        await gtagOnEvent(\n          gtagCore,\n          initializationPromisesMap,\n          dynamicConfigPromisesList,\n          measurementId as string,\n          gtagParams as GtagConfigOrEventParams\n        );\n      } else if (command === GtagCommand.CONFIG) {\n        const [measurementId, gtagParams] = args;\n        // If CONFIG, second arg must be measurementId.\n        await gtagOnConfig(\n          gtagCore,\n          initializationPromisesMap,\n          dynamicConfigPromisesList,\n          measurementIdToAppId,\n          measurementId as string,\n          gtagParams as GtagConfigOrEventParams\n        );\n      } else if (command === GtagCommand.CONSENT) {\n        const [consentAction, gtagParams] = args;\n        // consentAction can be one of 'default' or 'update'.\n        gtagCore(\n          GtagCommand.CONSENT,\n          consentAction,\n          gtagParams as ConsentSettings\n        );\n      } else if (command === GtagCommand.GET) {\n        const [measurementId, fieldName, callback] = args;\n        gtagCore(\n          GtagCommand.GET,\n          measurementId as string,\n          fieldName as string,\n          callback as (...args: unknown[]) => void\n        );\n      } else if (command === GtagCommand.SET) {\n        const [customParams] = args;\n        // If SET, second arg must be params.\n        gtagCore(GtagCommand.SET, customParams as CustomParams);\n      } else {\n        gtagCore(command, ...args);\n      }\n    } catch (e) {\n      logger.error(e);\n    }\n  }\n  return gtagWrapper as Gtag;\n}\n\n/**\n * Creates global gtag function or wraps existing one if found.\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\n * 'event' calls that belong to the GAID associated with this Firebase instance.\n *\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param dataLayerName Name of global GA datalayer array.\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\n */\nexport function wrapOrCreateGtag(\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [measurementId: string]: string },\n  dataLayerName: string,\n  gtagFunctionName: string\n): {\n  gtagCore: Gtag;\n  wrappedGtag: Gtag;\n} {\n  // Create a basic core gtag function\n  let gtagCore: Gtag = function (..._args: unknown[]) {\n    // Must push IArguments object, not an array.\n    (window[dataLayerName] as DataLayer).push(arguments);\n  };\n\n  // Replace it with existing one if found\n  if (\n    window[gtagFunctionName] &&\n    typeof window[gtagFunctionName] === 'function'\n  ) {\n    // @ts-ignore\n    gtagCore = window[gtagFunctionName];\n  }\n\n  window[gtagFunctionName] = wrapGtag(\n    gtagCore,\n    initializationPromisesMap,\n    dynamicConfigPromisesList,\n    measurementIdToAppId\n  );\n\n  return {\n    gtagCore,\n    wrappedGtag: window[gtagFunctionName] as Gtag\n  };\n}\n\n/**\n * Returns the script tag in the DOM matching both the gtag url pattern\n * and the provided data layer name.\n */\nexport function findGtagScriptOnPage(\n  dataLayerName: string\n): HTMLScriptElement | null {\n  const scriptTags = window.document.getElementsByTagName('script');\n  for (const tag of Object.values(scriptTags)) {\n    if (\n      tag.src &&\n      tag.src.includes(GTAG_URL) &&\n      tag.src.includes(dataLayerName)\n    ) {\n      return tag;\n    }\n  }\n  return null;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AnalyticsError {\n  ALREADY_EXISTS = 'already-exists',\n  ALREADY_INITIALIZED = 'already-initialized',\n  ALREADY_INITIALIZED_SETTINGS = 'already-initialized-settings',\n  INTEROP_COMPONENT_REG_FAILED = 'interop-component-reg-failed',\n  INVALID_ANALYTICS_CONTEXT = 'invalid-analytics-context',\n  INDEXEDDB_UNAVAILABLE = 'indexeddb-unavailable',\n  FETCH_THROTTLE = 'fetch-throttle',\n  CONFIG_FETCH_FAILED = 'config-fetch-failed',\n  NO_API_KEY = 'no-api-key',\n  NO_APP_ID = 'no-app-id',\n  NO_CLIENT_ID = 'no-client-id',\n  INVALID_GTAG_RESOURCE = 'invalid-gtag-resource'\n}\n\nconst ERRORS: ErrorMap<AnalyticsError> = {\n  [AnalyticsError.ALREADY_EXISTS]:\n    'A Firebase Analytics instance with the appId {$id} ' +\n    ' already exists. ' +\n    'Only one Firebase Analytics instance can be created for each appId.',\n  [AnalyticsError.ALREADY_INITIALIZED]:\n    'initializeAnalytics() cannot be called again with different options than those ' +\n    'it was initially called with. It can be called again with the same options to ' +\n    'return the existing instance, or getAnalytics() can be used ' +\n    'to get a reference to the already-intialized instance.',\n  [AnalyticsError.ALREADY_INITIALIZED_SETTINGS]:\n    'Firebase Analytics has already been initialized.' +\n    'settings() must be called before initializing any Analytics instance' +\n    'or it will have no effect.',\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]:\n    'Firebase Analytics Interop Component failed to instantiate: {$reason}',\n  [AnalyticsError.INVALID_ANALYTICS_CONTEXT]:\n    'Firebase Analytics is not supported in this environment. ' +\n    'Wrap initialization of analytics in analytics.isSupported() ' +\n    'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [AnalyticsError.INDEXEDDB_UNAVAILABLE]:\n    'IndexedDB unavailable or restricted in this environment. ' +\n    'Wrap initialization of analytics in analytics.isSupported() ' +\n    'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [AnalyticsError.FETCH_THROTTLE]:\n    'The config fetch request timed out while in an exponential backoff state.' +\n    ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\n  [AnalyticsError.CONFIG_FETCH_FAILED]:\n    'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}',\n  [AnalyticsError.NO_API_KEY]:\n    'The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\n    'contain a valid API key.',\n  [AnalyticsError.NO_APP_ID]:\n    'The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\n    'contain a valid app ID.',\n  [AnalyticsError.NO_CLIENT_ID]: 'The \"client_id\" field is empty.',\n  [AnalyticsError.INVALID_GTAG_RESOURCE]:\n    'Trusted Types detected an invalid gtag resource: {$gtagURL}.'\n};\n\ninterface ErrorParams {\n  [AnalyticsError.ALREADY_EXISTS]: { id: string };\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]: { reason: Error };\n  [AnalyticsError.FETCH_THROTTLE]: { throttleEndTimeMillis: number };\n  [AnalyticsError.CONFIG_FETCH_FAILED]: {\n    httpStatus: number;\n    responseMessage: string;\n  };\n  [AnalyticsError.INVALID_ANALYTICS_CONTEXT]: { errorInfo: string };\n  [AnalyticsError.INDEXEDDB_UNAVAILABLE]: { errorInfo: string };\n  [AnalyticsError.INVALID_GTAG_RESOURCE]: { gtagURL: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AnalyticsError, ErrorParams>(\n  'analytics',\n  'Analytics',\n  ERRORS\n);\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Most logic is copied from packages/remote-config/src/client/retrying_client.ts\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport { DynamicConfig, ThrottleMetadata, MinimalDynamicConfig } from './types';\nimport { FirebaseError, calculateBackoffMillis } from '@firebase/util';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\nimport { DYNAMIC_CONFIG_URL, FETCH_TIMEOUT_MILLIS } from './constants';\nimport { logger } from './logger';\n\n// App config fields needed by analytics.\nexport interface AppFields {\n  appId: string;\n  apiKey: string;\n  measurementId?: string;\n}\n\n/**\n * Backoff factor for 503 errors, which we want to be conservative about\n * to avoid overloading servers. Each retry interval will be\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\n * will be ~30 seconds (with fuzzing).\n */\nexport const LONG_RETRY_FACTOR = 30;\n\n/**\n * Base wait interval to multiplied by backoffFactor^backoffCount.\n */\nconst BASE_INTERVAL_MILLIS = 1000;\n\n/**\n * Stubbable retry data storage class.\n */\nclass RetryData {\n  constructor(\n    public throttleMetadata: { [appId: string]: ThrottleMetadata } = {},\n    public intervalMillis: number = BASE_INTERVAL_MILLIS\n  ) {}\n\n  getThrottleMetadata(appId: string): ThrottleMetadata {\n    return this.throttleMetadata[appId];\n  }\n\n  setThrottleMetadata(appId: string, metadata: ThrottleMetadata): void {\n    this.throttleMetadata[appId] = metadata;\n  }\n\n  deleteThrottleMetadata(appId: string): void {\n    delete this.throttleMetadata[appId];\n  }\n}\n\nconst defaultRetryData = new RetryData();\n\n/**\n * Set GET request headers.\n * @param apiKey App API key.\n */\nfunction getHeaders(apiKey: string): Headers {\n  return new Headers({\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\n/**\n * Fetches dynamic config from backend.\n * @param app Firebase app to fetch config for.\n */\nexport async function fetchDynamicConfig(\n  appFields: AppFields\n): Promise<DynamicConfig> {\n  const { appId, apiKey } = appFields;\n  const request: RequestInit = {\n    method: 'GET',\n    headers: getHeaders(apiKey)\n  };\n  const appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\n  const response = await fetch(appUrl, request);\n  if (response.status !== 200 && response.status !== 304) {\n    let errorMessage = '';\n    try {\n      // Try to get any error message text from server response.\n      const jsonResponse = (await response.json()) as {\n        error?: { message?: string };\n      };\n      if (jsonResponse.error?.message) {\n        errorMessage = jsonResponse.error.message;\n      }\n    } catch (_ignored) {}\n    throw ERROR_FACTORY.create(AnalyticsError.CONFIG_FETCH_FAILED, {\n      httpStatus: response.status,\n      responseMessage: errorMessage\n    });\n  }\n  return response.json();\n}\n\n/**\n * Fetches dynamic config from backend, retrying if failed.\n * @param app Firebase app to fetch config for.\n */\nexport async function fetchDynamicConfigWithRetry(\n  app: FirebaseApp,\n  // retryData and timeoutMillis are parameterized to allow passing a different value for testing.\n  retryData: RetryData = defaultRetryData,\n  timeoutMillis?: number\n): Promise<DynamicConfig | MinimalDynamicConfig> {\n  const { appId, apiKey, measurementId } = app.options;\n\n  if (!appId) {\n    throw ERROR_FACTORY.create(AnalyticsError.NO_APP_ID);\n  }\n\n  if (!apiKey) {\n    if (measurementId) {\n      return {\n        measurementId,\n        appId\n      };\n    }\n    throw ERROR_FACTORY.create(AnalyticsError.NO_API_KEY);\n  }\n\n  const throttleMetadata: ThrottleMetadata = retryData.getThrottleMetadata(\n    appId\n  ) || {\n    backoffCount: 0,\n    throttleEndTimeMillis: Date.now()\n  };\n\n  const signal = new AnalyticsAbortSignal();\n\n  setTimeout(\n    async () => {\n      // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n      signal.abort();\n    },\n    timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS\n  );\n\n  return attemptFetchDynamicConfigWithRetry(\n    { appId, apiKey, measurementId },\n    throttleMetadata,\n    signal,\n    retryData\n  );\n}\n\n/**\n * Runs one retry attempt.\n * @param appFields Necessary app config fields.\n * @param throttleMetadata Ongoing metadata to determine throttling times.\n * @param signal Abort signal.\n */\nasync function attemptFetchDynamicConfigWithRetry(\n  appFields: AppFields,\n  { throttleEndTimeMillis, backoffCount }: ThrottleMetadata,\n  signal: AnalyticsAbortSignal,\n  retryData: RetryData = defaultRetryData // for testing\n): Promise<DynamicConfig | MinimalDynamicConfig> {\n  const { appId, measurementId } = appFields;\n  // Starts with a (potentially zero) timeout to support resumption from stored state.\n  // Ensures the throttle end time is honored if the last attempt timed out.\n  // Note the SDK will never make a request if the fetch timeout expires at this point.\n  try {\n    await setAbortableTimeout(signal, throttleEndTimeMillis);\n  } catch (e) {\n    if (measurementId) {\n      logger.warn(\n        `Timed out fetching this Firebase app's measurement ID from the server.` +\n          ` Falling back to the measurement ID ${measurementId}` +\n          ` provided in the \"measurementId\" field in the local Firebase config. [${\n            (e as Error)?.message\n          }]`\n      );\n      return { appId, measurementId };\n    }\n    throw e;\n  }\n\n  try {\n    const response = await fetchDynamicConfig(appFields);\n\n    // Note the SDK only clears throttle state if response is success or non-retriable.\n    retryData.deleteThrottleMetadata(appId);\n\n    return response;\n  } catch (e) {\n    const error = e as Error;\n    if (!isRetriableError(error)) {\n      retryData.deleteThrottleMetadata(appId);\n      if (measurementId) {\n        logger.warn(\n          `Failed to fetch this Firebase app's measurement ID from the server.` +\n            ` Falling back to the measurement ID ${measurementId}` +\n            ` provided in the \"measurementId\" field in the local Firebase config. [${error?.message}]`\n        );\n        return { appId, measurementId };\n      } else {\n        throw e;\n      }\n    }\n\n    const backoffMillis =\n      Number(error?.customData?.httpStatus) === 503\n        ? calculateBackoffMillis(\n            backoffCount,\n            retryData.intervalMillis,\n            LONG_RETRY_FACTOR\n          )\n        : calculateBackoffMillis(backoffCount, retryData.intervalMillis);\n\n    // Increments backoff state.\n    const throttleMetadata = {\n      throttleEndTimeMillis: Date.now() + backoffMillis,\n      backoffCount: backoffCount + 1\n    };\n\n    // Persists state.\n    retryData.setThrottleMetadata(appId, throttleMetadata);\n    logger.debug(`Calling attemptFetch again in ${backoffMillis} millis`);\n\n    return attemptFetchDynamicConfigWithRetry(\n      appFields,\n      throttleMetadata,\n      signal,\n      retryData\n    );\n  }\n}\n\n/**\n * Supports waiting on a backoff by:\n *\n * <ul>\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\n *       request appear the same.</li>\n * </ul>\n *\n * <p>Visible for testing.\n */\nfunction setAbortableTimeout(\n  signal: AnalyticsAbortSignal,\n  throttleEndTimeMillis: number\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n\n    const timeout = setTimeout(resolve, backoffMillis);\n\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(() => {\n      clearTimeout(timeout);\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(\n        ERROR_FACTORY.create(AnalyticsError.FETCH_THROTTLE, {\n          throttleEndTimeMillis\n        })\n      );\n    });\n  });\n}\n\ntype RetriableError = FirebaseError & { customData: { httpStatus: string } };\n\n/**\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\n */\nfunction isRetriableError(e: Error): e is RetriableError {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  }\n\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  const httpStatus = Number(e.customData['httpStatus']);\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\n/**\n * Shims a minimal AbortSignal (copied from Remote Config).\n *\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\n * swapped out if/when we do.\n */\nexport class AnalyticsAbortSignal {\n  listeners: Array<() => void> = [];\n  addEventListener(listener: () => void): void {\n    this.listeners.push(listener);\n  }\n  abort(): void {\n    this.listeners.forEach(listener => listener());\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnalyticsCallOptions,\n  CustomParams,\n  ControlParams,\n  EventParams,\n  ConsentSettings\n} from './public-types';\nimport { Gtag } from './types';\nimport { GtagCommand } from './constants';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\n\n/**\n * Event parameters to set on 'gtag' during initialization.\n */\nexport let defaultEventParametersForInit: CustomParams | undefined;\n\n/**\n * Logs an analytics event through the Firebase SDK.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\n * @param eventParams Analytics event parameters.\n */\nexport async function logEvent(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  eventName: string,\n  eventParams?: EventParams,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.EVENT, eventName, eventParams);\n    return;\n  } else {\n    const measurementId = await initializationPromise;\n    const params: EventParams | ControlParams = {\n      ...eventParams,\n      'send_to': measurementId\n    };\n    gtagFunction(GtagCommand.EVENT, eventName, params);\n  }\n}\n\n/**\n * Set screen_name parameter for this Google Analytics ID.\n *\n * @deprecated Use {@link logEvent} with `eventName` as 'screen_view' and add relevant `eventParams`.\n * See {@link https://firebase.google.com/docs/analytics/screenviews | Track Screenviews}.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param screenName Screen name string to set.\n */\nexport async function setCurrentScreen(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  screenName: string | null,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'screen_name': screenName });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'screen_name': screenName\n    });\n  }\n}\n\n/**\n * Set user_id parameter for this Google Analytics ID.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param id User ID string to set\n */\nexport async function setUserId(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  id: string | null,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'user_id': id });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'user_id': id\n    });\n  }\n}\n\n/**\n * Set all other user properties other than user_id and screen_name.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param properties Map of user properties to set\n */\nexport async function setUserProperties(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  properties: CustomParams,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    const flatProperties: { [key: string]: unknown } = {};\n    for (const key of Object.keys(properties)) {\n      // use dot notation for merge behavior in gtag.js\n      flatProperties[`user_properties.${key}`] = properties[key];\n    }\n    gtagFunction(GtagCommand.SET, flatProperties);\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'user_properties': properties\n    });\n  }\n}\n\n/**\n * Retrieves a unique Google Analytics identifier for the web client.\n * See {@link https://developers.google.com/analytics/devguides/collection/ga4/reference/config#client_id | client_id}.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n */\nexport async function internalGetGoogleAnalyticsClientId(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>\n): Promise<string> {\n  const measurementId = await initializationPromise;\n  return new Promise((resolve, reject) => {\n    gtagFunction(\n      GtagCommand.GET,\n      measurementId,\n      'client_id',\n      (clientId: string) => {\n        if (!clientId) {\n          reject(ERROR_FACTORY.create(AnalyticsError.NO_CLIENT_ID));\n        }\n        resolve(clientId);\n      }\n    );\n  });\n}\n\n/**\n * Set whether collection is enabled for this ID.\n *\n * @param enabled If true, collection is enabled for this ID.\n */\nexport async function setAnalyticsCollectionEnabled(\n  initializationPromise: Promise<string>,\n  enabled: boolean\n): Promise<void> {\n  const measurementId = await initializationPromise;\n  window[`ga-disable-${measurementId}`] = !enabled;\n}\n\n/**\n * Consent parameters to default to during 'gtag' initialization.\n */\nexport let defaultConsentSettingsForInit: ConsentSettings | undefined;\n\n/**\n * Sets the variable {@link defaultConsentSettingsForInit} for use in the initialization of\n * analytics.\n *\n * @param consentSettings Maps the applicable end user consent state for gtag.js.\n */\nexport function _setConsentDefaultForInit(\n  consentSettings?: ConsentSettings\n): void {\n  defaultConsentSettingsForInit = consentSettings;\n}\n\n/**\n * Sets the variable `defaultEventParametersForInit` for use in the initialization of\n * analytics.\n *\n * @param customParams Any custom params the user may pass to gtag.js.\n */\nexport function _setDefaultEventParametersForInit(\n  customParams?: CustomParams\n): void {\n  defaultEventParametersForInit = customParams;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DynamicConfig, Gtag, MinimalDynamicConfig } from './types';\nimport { GtagCommand, GA_FID_KEY, ORIGIN_KEY } from './constants';\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\nimport { fetchDynamicConfigWithRetry } from './get-config';\nimport { logger } from './logger';\nimport { FirebaseApp } from '@firebase/app';\nimport {\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport { ERROR_FACTORY, AnalyticsError } from './errors';\nimport { findGtagScriptOnPage, insertScriptTag } from './helpers';\nimport { AnalyticsSettings } from './public-types';\nimport {\n  defaultConsentSettingsForInit,\n  _setConsentDefaultForInit,\n  defaultEventParametersForInit,\n  _setDefaultEventParametersForInit\n} from './functions';\n\nasync function validateIndexedDB(): Promise<boolean> {\n  if (!isIndexedDBAvailable()) {\n    logger.warn(\n      ERROR_FACTORY.create(AnalyticsError.INDEXEDDB_UNAVAILABLE, {\n        errorInfo: 'IndexedDB is not available in this environment.'\n      }).message\n    );\n    return false;\n  } else {\n    try {\n      await validateIndexedDBOpenable();\n    } catch (e) {\n      logger.warn(\n        ERROR_FACTORY.create(AnalyticsError.INDEXEDDB_UNAVAILABLE, {\n          errorInfo: (e as Error)?.toString()\n        }).message\n      );\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Initialize the analytics instance in gtag.js by calling config command with fid.\n *\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\n * part of the `page_view` event that's sent during the initialization\n * @param app Firebase app\n * @param gtagCore The gtag function that's not wrapped.\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\n * @param measurementIdToAppId Maps measurementID to appID.\n * @param installations _FirebaseInstallationsInternal instance.\n *\n * @returns Measurement ID.\n */\nexport async function _initializeAnalytics(\n  app: FirebaseApp,\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [key: string]: string },\n  installations: _FirebaseInstallationsInternal,\n  gtagCore: Gtag,\n  dataLayerName: string,\n  options?: AnalyticsSettings\n): Promise<string> {\n  const dynamicConfigPromise = fetchDynamicConfigWithRetry(app);\n  // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\n  dynamicConfigPromise\n    .then(config => {\n      measurementIdToAppId[config.measurementId] = config.appId;\n      if (\n        app.options.measurementId &&\n        config.measurementId !== app.options.measurementId\n      ) {\n        logger.warn(\n          `The measurement ID in the local Firebase config (${app.options.measurementId})` +\n            ` does not match the measurement ID fetched from the server (${config.measurementId}).` +\n            ` To ensure analytics events are always sent to the correct Analytics property,` +\n            ` update the` +\n            ` measurement ID field in the local config or remove it from the local config.`\n        );\n      }\n    })\n    .catch(e => logger.error(e));\n  // Add to list to track state of all dynamic config promises.\n  dynamicConfigPromisesList.push(dynamicConfigPromise);\n\n  const fidPromise: Promise<string | undefined> = validateIndexedDB().then(\n    envIsValid => {\n      if (envIsValid) {\n        return installations.getId();\n      } else {\n        return undefined;\n      }\n    }\n  );\n\n  const [dynamicConfig, fid] = await Promise.all([\n    dynamicConfigPromise,\n    fidPromise\n  ]);\n\n  // Detect if user has already put the gtag <script> tag on this page with the passed in\n  // data layer name.\n  if (!findGtagScriptOnPage(dataLayerName)) {\n    insertScriptTag(dataLayerName, dynamicConfig.measurementId);\n  }\n\n  // Detects if there are consent settings that need to be configured.\n  if (defaultConsentSettingsForInit) {\n    gtagCore(GtagCommand.CONSENT, 'default', defaultConsentSettingsForInit);\n    _setConsentDefaultForInit(undefined);\n  }\n\n  // This command initializes gtag.js and only needs to be called once for the entire web app,\n  // but since it is idempotent, we can call it multiple times.\n  // We keep it together with other initialization logic for better code structure.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (gtagCore as any)('js', new Date());\n  // User config added first. We don't want users to accidentally overwrite\n  // base Firebase config properties.\n  const configProperties: Record<string, unknown> = options?.config ?? {};\n\n  // guard against developers accidentally setting properties with prefix `firebase_`\n  configProperties[ORIGIN_KEY] = 'firebase';\n  configProperties.update = true;\n\n  if (fid != null) {\n    configProperties[GA_FID_KEY] = fid;\n  }\n\n  // It should be the first config command called on this GA-ID\n  // Initialize this GA-ID and set FID on it using the gtag config API.\n  // Note: This will trigger a page_view event unless 'send_page_view' is set to false in\n  // `configProperties`.\n  gtagCore(GtagCommand.CONFIG, dynamicConfig.measurementId, configProperties);\n\n  // Detects if there is data that will be set on every event logged from the SDK.\n  if (defaultEventParametersForInit) {\n    gtagCore(GtagCommand.SET, defaultEventParametersForInit);\n    _setDefaultEventParametersForInit(undefined);\n  }\n\n  return dynamicConfig.measurementId;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SettingsOptions, Analytics, AnalyticsSettings } from './public-types';\nimport { Gtag, DynamicConfig, MinimalDynamicConfig } from './types';\nimport { getOrCreateDataLayer, wrapOrCreateGtag } from './helpers';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\nimport { areCookiesEnabled, isBrowserExtension } from '@firebase/util';\nimport { _initializeAnalytics } from './initialize-analytics';\nimport { logger } from './logger';\nimport { FirebaseApp, _FirebaseService } from '@firebase/app';\n\n/**\n * Analytics Service class.\n */\nexport class AnalyticsService implements Analytics, _FirebaseService {\n  constructor(public app: FirebaseApp) {}\n  _delete(): Promise<void> {\n    delete initializationPromisesMap[this.app.options.appId!];\n    return Promise.resolve();\n  }\n}\n\n/**\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\n * all or some of these, depending on the call's `send_to` param and the status\n * of the dynamic config fetches (see below).\n */\nexport let initializationPromisesMap: {\n  [appId: string]: Promise<string>; // Promise contains measurement ID string.\n} = {};\n\n/**\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\n * wait on all these to be complete in order to determine if it can selectively\n * wait for only certain initialization (FID) promises or if it must wait for all.\n */\nlet dynamicConfigPromisesList: Array<\n  Promise<DynamicConfig | MinimalDynamicConfig>\n> = [];\n\n/**\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\n * fetch completes. If already populated, gtag config calls can use this to\n * selectively wait for only this app's initialization promise (FID) instead of all\n * initialization promises.\n */\nconst measurementIdToAppId: { [measurementId: string]: string } = {};\n\n/**\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\n */\nlet dataLayerName: string = 'dataLayer';\n\n/**\n * Name for window global gtag function used by GA: defaults to 'gtag'.\n */\nlet gtagName: string = 'gtag';\n\n/**\n * Reproduction of standard gtag function or reference to existing\n * gtag function on window object.\n */\nlet gtagCoreFunction: Gtag;\n\n/**\n * Wrapper around gtag function that ensures FID is sent with all\n * relevant event and config calls.\n */\nexport let wrappedGtagFunction: Gtag;\n\n/**\n * Flag to ensure page initialization steps (creation or wrapping of\n * dataLayer and gtag script) are only run once per page load.\n */\nlet globalInitDone: boolean = false;\n\n/**\n * For testing\n * @internal\n */\nexport function resetGlobalVars(\n  newGlobalInitDone = false,\n  newInitializationPromisesMap = {},\n  newDynamicPromises = []\n): void {\n  globalInitDone = newGlobalInitDone;\n  initializationPromisesMap = newInitializationPromisesMap;\n  dynamicConfigPromisesList = newDynamicPromises;\n  dataLayerName = 'dataLayer';\n  gtagName = 'gtag';\n}\n\n/**\n * For testing\n * @internal\n */\nexport function getGlobalVars(): {\n  initializationPromisesMap: { [appId: string]: Promise<string> };\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >;\n} {\n  return {\n    initializationPromisesMap,\n    dynamicConfigPromisesList\n  };\n}\n\n/**\n * Configures Firebase Analytics to use custom `gtag` or `dataLayer` names.\n * Intended to be used if `gtag.js` script has been installed on\n * this page independently of Firebase Analytics, and is using non-default\n * names for either the `gtag` function or for `dataLayer`.\n * Must be called before calling `getAnalytics()` or it won't\n * have any effect.\n *\n * @public\n *\n * @param options - Custom gtag and dataLayer names.\n */\nexport function settings(options: SettingsOptions): void {\n  if (globalInitDone) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_INITIALIZED);\n  }\n  if (options.dataLayerName) {\n    dataLayerName = options.dataLayerName;\n  }\n  if (options.gtagName) {\n    gtagName = options.gtagName;\n  }\n}\n\n/**\n * Returns true if no environment mismatch is found.\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\n * error that also lists details for each mismatch found.\n */\nfunction warnOnBrowserContextMismatch(): void {\n  const mismatchedEnvMessages = [];\n  if (isBrowserExtension()) {\n    mismatchedEnvMessages.push('This is a browser extension environment.');\n  }\n  if (!areCookiesEnabled()) {\n    mismatchedEnvMessages.push('Cookies are not available.');\n  }\n  if (mismatchedEnvMessages.length > 0) {\n    const details = mismatchedEnvMessages\n      .map((message, index) => `(${index + 1}) ${message}`)\n      .join(' ');\n    const err = ERROR_FACTORY.create(AnalyticsError.INVALID_ANALYTICS_CONTEXT, {\n      errorInfo: details\n    });\n    logger.warn(err.message);\n  }\n}\n\n/**\n * Analytics instance factory.\n * @internal\n */\nexport function factory(\n  app: FirebaseApp,\n  installations: _FirebaseInstallationsInternal,\n  options?: AnalyticsSettings\n): AnalyticsService {\n  warnOnBrowserContextMismatch();\n  const appId = app.options.appId;\n  if (!appId) {\n    throw ERROR_FACTORY.create(AnalyticsError.NO_APP_ID);\n  }\n  if (!app.options.apiKey) {\n    if (app.options.measurementId) {\n      logger.warn(\n        `The \"apiKey\" field is empty in the local Firebase config. This is needed to fetch the latest` +\n          ` measurement ID for this Firebase app. Falling back to the measurement ID ${app.options.measurementId}` +\n          ` provided in the \"measurementId\" field in the local Firebase config.`\n      );\n    } else {\n      throw ERROR_FACTORY.create(AnalyticsError.NO_API_KEY);\n    }\n  }\n  if (initializationPromisesMap[appId] != null) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_EXISTS, {\n      id: appId\n    });\n  }\n\n  if (!globalInitDone) {\n    // Steps here should only be done once per page: creation or wrapping\n    // of dataLayer and global gtag function.\n\n    getOrCreateDataLayer(dataLayerName);\n\n    const { wrappedGtag, gtagCore } = wrapOrCreateGtag(\n      initializationPromisesMap,\n      dynamicConfigPromisesList,\n      measurementIdToAppId,\n      dataLayerName,\n      gtagName\n    );\n    wrappedGtagFunction = wrappedGtag;\n    gtagCoreFunction = gtagCore;\n\n    globalInitDone = true;\n  }\n  // Async but non-blocking.\n  // This map reflects the completion state of all promises for each appId.\n  initializationPromisesMap[appId] = _initializeAnalytics(\n    app,\n    dynamicConfigPromisesList,\n    measurementIdToAppId,\n    installations,\n    gtagCoreFunction,\n    dataLayerName,\n    options\n  );\n\n  const analyticsInstance: AnalyticsService = new AnalyticsService(app);\n\n  return analyticsInstance;\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable camelcase */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\nimport {\n  Analytics,\n  AnalyticsCallOptions,\n  AnalyticsSettings,\n  ConsentSettings,\n  CustomParams,\n  EventNameString,\n  EventParams\n} from './public-types';\nimport { Provider } from '@firebase/component';\nimport {\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable,\n  areCookiesEnabled,\n  isBrowserExtension,\n  getModularInstance,\n  deepEqual\n} from '@firebase/util';\nimport { ANALYTICS_TYPE, GtagCommand } from './constants';\nimport {\n  AnalyticsService,\n  initializationPromisesMap,\n  wrappedGtagFunction\n} from './factory';\nimport { logger } from './logger';\nimport {\n  logEvent as internalLogEvent,\n  setCurrentScreen as internalSetCurrentScreen,\n  setUserId as internalSetUserId,\n  setUserProperties as internalSetUserProperties,\n  setAnalyticsCollectionEnabled as internalSetAnalyticsCollectionEnabled,\n  _setConsentDefaultForInit,\n  _setDefaultEventParametersForInit,\n  internalGetGoogleAnalyticsClientId\n} from './functions';\nimport { ERROR_FACTORY, AnalyticsError } from './errors';\n\nexport { settings } from './factory';\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    [ANALYTICS_TYPE]: AnalyticsService;\n  }\n}\n\n/**\n * Returns an {@link Analytics} instance for the given app.\n *\n * @public\n *\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n */\nexport function getAnalytics(app: FirebaseApp = getApp()): Analytics {\n  app = getModularInstance(app);\n  // Dependencies\n  const analyticsProvider: Provider<'analytics'> = _getProvider(\n    app,\n    ANALYTICS_TYPE\n  );\n\n  if (analyticsProvider.isInitialized()) {\n    return analyticsProvider.getImmediate();\n  }\n\n  return initializeAnalytics(app);\n}\n\n/**\n * Returns an {@link Analytics} instance for the given app.\n *\n * @public\n *\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n */\nexport function initializeAnalytics(\n  app: FirebaseApp,\n  options: AnalyticsSettings = {}\n): Analytics {\n  // Dependencies\n  const analyticsProvider: Provider<'analytics'> = _getProvider(\n    app,\n    ANALYTICS_TYPE\n  );\n  if (analyticsProvider.isInitialized()) {\n    const existingInstance = analyticsProvider.getImmediate();\n    if (deepEqual(options, analyticsProvider.getOptions())) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(AnalyticsError.ALREADY_INITIALIZED);\n    }\n  }\n  const analyticsInstance = analyticsProvider.initialize({ options });\n  return analyticsInstance;\n}\n\n/**\n * This is a public static method provided to users that wraps four different checks:\n *\n * 1. Check if it's not a browser extension environment.\n * 2. Check if cookies are enabled in current browser.\n * 3. Check if IndexedDB is supported by the browser environment.\n * 4. Check if the current browser context is valid for using `IndexedDB.open()`.\n *\n * @public\n *\n */\nexport async function isSupported(): Promise<boolean> {\n  if (isBrowserExtension()) {\n    return false;\n  }\n  if (!areCookiesEnabled()) {\n    return false;\n  }\n  if (!isIndexedDBAvailable()) {\n    return false;\n  }\n\n  try {\n    const isDBOpenable: boolean = await validateIndexedDBOpenable();\n    return isDBOpenable;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Use gtag `config` command to set `screen_name`.\n *\n * @public\n *\n * @deprecated Use {@link logEvent} with `eventName` as 'screen_view' and add relevant `eventParams`.\n * See {@link https://firebase.google.com/docs/analytics/screenviews | Track Screenviews}.\n *\n * @param analyticsInstance - The {@link Analytics} instance.\n * @param screenName - Screen name to set.\n */\nexport function setCurrentScreen(\n  analyticsInstance: Analytics,\n  screenName: string,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetCurrentScreen(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    screenName,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Retrieves a unique Google Analytics identifier for the web client.\n * See {@link https://developers.google.com/analytics/devguides/collection/ga4/reference/config#client_id | client_id}.\n *\n * @public\n *\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n */\nexport async function getGoogleAnalyticsClientId(\n  analyticsInstance: Analytics\n): Promise<string> {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  return internalGetGoogleAnalyticsClientId(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!]\n  );\n}\n\n/**\n * Use gtag `config` command to set `user_id`.\n *\n * @public\n *\n * @param analyticsInstance - The {@link Analytics} instance.\n * @param id - User ID to set.\n */\nexport function setUserId(\n  analyticsInstance: Analytics,\n  id: string | null,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetUserId(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    id,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Use gtag `config` command to set all params specified.\n *\n * @public\n */\nexport function setUserProperties(\n  analyticsInstance: Analytics,\n  properties: CustomParams,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetUserProperties(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    properties,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Sets whether Google Analytics collection is enabled for this app on this device.\n * Sets global `window['ga-disable-analyticsId'] = true;`\n *\n * @public\n *\n * @param analyticsInstance - The {@link Analytics} instance.\n * @param enabled - If true, enables collection, if false, disables it.\n */\nexport function setAnalyticsCollectionEnabled(\n  analyticsInstance: Analytics,\n  enabled: boolean\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetAnalyticsCollectionEnabled(\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    enabled\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Adds data that will be set on every event logged from the SDK, including automatic ones.\n * With gtag's \"set\" command, the values passed persist on the current page and are passed with\n * all subsequent events.\n * @public\n * @param customParams - Any custom params the user may pass to gtag.js.\n */\nexport function setDefaultEventParameters(customParams: CustomParams): void {\n  // Check if reference to existing gtag function on window object exists\n  if (wrappedGtagFunction) {\n    wrappedGtagFunction(GtagCommand.SET, customParams);\n  } else {\n    _setDefaultEventParametersForInit(customParams);\n  }\n}\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'add_payment_info',\n  eventParams?: {\n    coupon?: EventParams['coupon'];\n    currency?: EventParams['currency'];\n    items?: EventParams['items'];\n    payment_type?: EventParams['payment_type'];\n    value?: EventParams['value'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'add_shipping_info',\n  eventParams?: {\n    coupon?: EventParams['coupon'];\n    currency?: EventParams['currency'];\n    items?: EventParams['items'];\n    shipping_tier?: EventParams['shipping_tier'];\n    value?: EventParams['value'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'add_to_cart' | 'add_to_wishlist' | 'remove_from_cart',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    value?: EventParams['value'];\n    items?: EventParams['items'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'begin_checkout',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    coupon?: EventParams['coupon'];\n    value?: EventParams['value'];\n    items?: EventParams['items'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'checkout_progress',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    coupon?: EventParams['coupon'];\n    value?: EventParams['value'];\n    items?: EventParams['items'];\n    checkout_step?: EventParams['checkout_step'];\n    checkout_option?: EventParams['checkout_option'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * See\n * {@link https://developers.google.com/analytics/devguides/collection/ga4/exceptions\n * | Measure exceptions}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'exception',\n  eventParams?: {\n    description?: EventParams['description'];\n    fatal?: EventParams['fatal'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'generate_lead',\n  eventParams?: {\n    value?: EventParams['value'];\n    currency?: EventParams['currency'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'login',\n  eventParams?: {\n    method?: EventParams['method'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * See\n * {@link https://developers.google.com/analytics/devguides/collection/ga4/views\n * | Page views}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'page_view',\n  eventParams?: {\n    page_title?: string;\n    page_location?: string;\n    page_path?: string;\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'purchase' | 'refund',\n  eventParams?: {\n    value?: EventParams['value'];\n    currency?: EventParams['currency'];\n    transaction_id: EventParams['transaction_id'];\n    tax?: EventParams['tax'];\n    shipping?: EventParams['shipping'];\n    items?: EventParams['items'];\n    coupon?: EventParams['coupon'];\n    affiliation?: EventParams['affiliation'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * See {@link https://firebase.google.com/docs/analytics/screenviews\n * | Track Screenviews}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'screen_view',\n  eventParams?: {\n    firebase_screen: EventParams['firebase_screen'];\n    firebase_screen_class: EventParams['firebase_screen_class'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'search' | 'view_search_results',\n  eventParams?: {\n    search_term?: EventParams['search_term'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'select_content',\n  eventParams?: {\n    content_type?: EventParams['content_type'];\n    item_id?: EventParams['item_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'select_item',\n  eventParams?: {\n    items?: EventParams['items'];\n    item_list_name?: EventParams['item_list_name'];\n    item_list_id?: EventParams['item_list_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'select_promotion' | 'view_promotion',\n  eventParams?: {\n    items?: EventParams['items'];\n    promotion_id?: EventParams['promotion_id'];\n    promotion_name?: EventParams['promotion_name'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'set_checkout_option',\n  eventParams?: {\n    checkout_step?: EventParams['checkout_step'];\n    checkout_option?: EventParams['checkout_option'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'share',\n  eventParams?: {\n    method?: EventParams['method'];\n    content_type?: EventParams['content_type'];\n    item_id?: EventParams['item_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'sign_up',\n  eventParams?: {\n    method?: EventParams['method'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'timing_complete',\n  eventParams?: {\n    name: string;\n    value: number;\n    event_category?: string;\n    event_label?: string;\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'view_cart' | 'view_item',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    items?: EventParams['items'];\n    value?: EventParams['value'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'view_item_list',\n  eventParams?: {\n    items?: EventParams['items'];\n    item_list_name?: EventParams['item_list_name'];\n    item_list_id?: EventParams['item_list_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent<T extends string>(\n  analyticsInstance: Analytics,\n  eventName: CustomEventName<T>,\n  eventParams?: { [key: string]: any },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * List of official event parameters can be found in the gtag.js\n * reference documentation:\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n *\n * @public\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: string,\n  eventParams?: EventParams,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalLogEvent(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    eventName,\n    eventParams,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Any custom event name string not in the standard list of recommended\n * event names.\n * @public\n */\nexport type CustomEventName<T> = T extends EventNameString ? never : T;\n\n/**\n * Sets the applicable end user consent state for this web app across all gtag references once\n * Firebase Analytics is initialized.\n *\n * Use the {@link ConsentSettings} to specify individual consent type values. By default consent\n * types are set to \"granted\".\n * @public\n * @param consentSettings - Maps the applicable end user consent state for gtag.js.\n */\nexport function setConsent(consentSettings: ConsentSettings): void {\n  // Check if reference to existing gtag function on window object exists\n  if (wrappedGtagFunction) {\n    wrappedGtagFunction(GtagCommand.CONSENT, 'update', consentSettings);\n  } else {\n    _setConsentDefaultForInit(consentSettings);\n  }\n}\n", "/**\n * The Firebase Analytics Web SDK.\n * This SDK does not work in a Node.js environment.\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerVersion, _registerComponent } from '@firebase/app';\nimport { FirebaseAnalyticsInternal } from '@firebase/analytics-interop-types';\nimport { factory } from './factory';\nimport { ANALYTICS_TYPE } from './constants';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\nimport { ERROR_FACTORY, AnalyticsError } from './errors';\nimport { logEvent } from './api';\nimport { name, version } from '../package.json';\nimport { AnalyticsCallOptions } from './public-types';\nimport '@firebase/installations';\n\ndeclare global {\n  interface Window {\n    [key: string]: unknown;\n  }\n}\n\nfunction registerAnalytics(): void {\n  _registerComponent(\n    new Component(\n      ANALYTICS_TYPE,\n      (container, { options: analyticsOptions }: InstanceFactoryOptions) => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const installations = container\n          .getProvider('installations-internal')\n          .getImmediate();\n\n        return factory(app, installations, analyticsOptions);\n      },\n      ComponentType.PUBLIC\n    )\n  );\n\n  _registerComponent(\n    new Component('analytics-internal', internalFactory, ComponentType.PRIVATE)\n  );\n\n  registerVersion(name, version);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n\n  function internalFactory(\n    container: ComponentContainer\n  ): FirebaseAnalyticsInternal {\n    try {\n      const analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\n      return {\n        logEvent: (\n          eventName: string,\n          eventParams?: { [key: string]: unknown },\n          options?: AnalyticsCallOptions\n        ) => logEvent(analytics, eventName, eventParams, options)\n      };\n    } catch (e) {\n      throw ERROR_FACTORY.create(AnalyticsError.INTEROP_COMPONENT_REG_FAILED, {\n        reason: e as Error\n      });\n    }\n  }\n}\n\nregisterAnalytics();\n\nexport * from './api';\nexport * from './public-types';\n"],
  "mappings": "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",
  "names": ["ResourceUrlPolicyHintsType", "AttributePolicyAction", "name", "setHref", "setHref", "setHref", "setHref", "isElement", "setSrc", "setSrc", "setFormaction", "setFormaction", "setSrc", "setSrc", "setTextContent", "setTextContent", "safeStyleSheet", "setAttribute", "setAttribute", "setHref", "setHref", "setHref", "setHref", "dataLayerName", "initializationPromisesMap", "dynamicConfigPromisesList", "measurementIdToAppId", "logEvent", "setCurrentScreen", "setUserId", "setUserProperties", "setAnalyticsCollectionEnabled", "internalSetCurrentScreen", "internalSetUserId", "internalSetUserProperties", "internalSetAnalyticsCollectionEnabled", "internalLogEvent"]
}
